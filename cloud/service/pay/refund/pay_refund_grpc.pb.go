// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: pay_refund.proto

// pay_refund 退款订单

package refund

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PayRefundService_PayRefundCreate_FullMethodName    = "/refund.PayRefundService/PayRefundCreate"
	PayRefundService_PayRefundUpdate_FullMethodName    = "/refund.PayRefundService/PayRefundUpdate"
	PayRefundService_PayRefundDelete_FullMethodName    = "/refund.PayRefundService/PayRefundDelete"
	PayRefundService_PayRefund_FullMethodName          = "/refund.PayRefundService/PayRefund"
	PayRefundService_PayRefundRecover_FullMethodName   = "/refund.PayRefundService/PayRefundRecover"
	PayRefundService_PayRefundList_FullMethodName      = "/refund.PayRefundService/PayRefundList"
	PayRefundService_PayRefundListTotal_FullMethodName = "/refund.PayRefundService/PayRefundListTotal"
)

// PayRefundServiceClient is the client API for PayRefundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PayRefundService 服务
type PayRefundServiceClient interface {
	PayRefundCreate(ctx context.Context, in *PayRefundCreateRequest, opts ...grpc.CallOption) (*PayRefundCreateResponse, error)
	PayRefundUpdate(ctx context.Context, in *PayRefundUpdateRequest, opts ...grpc.CallOption) (*PayRefundUpdateResponse, error)
	PayRefundDelete(ctx context.Context, in *PayRefundDeleteRequest, opts ...grpc.CallOption) (*PayRefundDeleteResponse, error)
	PayRefund(ctx context.Context, in *PayRefundRequest, opts ...grpc.CallOption) (*PayRefundResponse, error)
	PayRefundRecover(ctx context.Context, in *PayRefundRecoverRequest, opts ...grpc.CallOption) (*PayRefundRecoverResponse, error)
	PayRefundList(ctx context.Context, in *PayRefundListRequest, opts ...grpc.CallOption) (*PayRefundListResponse, error)
	PayRefundListTotal(ctx context.Context, in *PayRefundListTotalRequest, opts ...grpc.CallOption) (*PayRefundTotalResponse, error)
}

type payRefundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayRefundServiceClient(cc grpc.ClientConnInterface) PayRefundServiceClient {
	return &payRefundServiceClient{cc}
}

func (c *payRefundServiceClient) PayRefundCreate(ctx context.Context, in *PayRefundCreateRequest, opts ...grpc.CallOption) (*PayRefundCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRefundCreateResponse)
	err := c.cc.Invoke(ctx, PayRefundService_PayRefundCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRefundServiceClient) PayRefundUpdate(ctx context.Context, in *PayRefundUpdateRequest, opts ...grpc.CallOption) (*PayRefundUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRefundUpdateResponse)
	err := c.cc.Invoke(ctx, PayRefundService_PayRefundUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRefundServiceClient) PayRefundDelete(ctx context.Context, in *PayRefundDeleteRequest, opts ...grpc.CallOption) (*PayRefundDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRefundDeleteResponse)
	err := c.cc.Invoke(ctx, PayRefundService_PayRefundDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRefundServiceClient) PayRefund(ctx context.Context, in *PayRefundRequest, opts ...grpc.CallOption) (*PayRefundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRefundResponse)
	err := c.cc.Invoke(ctx, PayRefundService_PayRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRefundServiceClient) PayRefundRecover(ctx context.Context, in *PayRefundRecoverRequest, opts ...grpc.CallOption) (*PayRefundRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRefundRecoverResponse)
	err := c.cc.Invoke(ctx, PayRefundService_PayRefundRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRefundServiceClient) PayRefundList(ctx context.Context, in *PayRefundListRequest, opts ...grpc.CallOption) (*PayRefundListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRefundListResponse)
	err := c.cc.Invoke(ctx, PayRefundService_PayRefundList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payRefundServiceClient) PayRefundListTotal(ctx context.Context, in *PayRefundListTotalRequest, opts ...grpc.CallOption) (*PayRefundTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayRefundTotalResponse)
	err := c.cc.Invoke(ctx, PayRefundService_PayRefundListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayRefundServiceServer is the server API for PayRefundService service.
// All implementations must embed UnimplementedPayRefundServiceServer
// for forward compatibility
//
// PayRefundService 服务
type PayRefundServiceServer interface {
	PayRefundCreate(context.Context, *PayRefundCreateRequest) (*PayRefundCreateResponse, error)
	PayRefundUpdate(context.Context, *PayRefundUpdateRequest) (*PayRefundUpdateResponse, error)
	PayRefundDelete(context.Context, *PayRefundDeleteRequest) (*PayRefundDeleteResponse, error)
	PayRefund(context.Context, *PayRefundRequest) (*PayRefundResponse, error)
	PayRefundRecover(context.Context, *PayRefundRecoverRequest) (*PayRefundRecoverResponse, error)
	PayRefundList(context.Context, *PayRefundListRequest) (*PayRefundListResponse, error)
	PayRefundListTotal(context.Context, *PayRefundListTotalRequest) (*PayRefundTotalResponse, error)
	mustEmbedUnimplementedPayRefundServiceServer()
}

// UnimplementedPayRefundServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayRefundServiceServer struct {
}

func (UnimplementedPayRefundServiceServer) PayRefundCreate(context.Context, *PayRefundCreateRequest) (*PayRefundCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRefundCreate not implemented")
}
func (UnimplementedPayRefundServiceServer) PayRefundUpdate(context.Context, *PayRefundUpdateRequest) (*PayRefundUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRefundUpdate not implemented")
}
func (UnimplementedPayRefundServiceServer) PayRefundDelete(context.Context, *PayRefundDeleteRequest) (*PayRefundDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRefundDelete not implemented")
}
func (UnimplementedPayRefundServiceServer) PayRefund(context.Context, *PayRefundRequest) (*PayRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRefund not implemented")
}
func (UnimplementedPayRefundServiceServer) PayRefundRecover(context.Context, *PayRefundRecoverRequest) (*PayRefundRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRefundRecover not implemented")
}
func (UnimplementedPayRefundServiceServer) PayRefundList(context.Context, *PayRefundListRequest) (*PayRefundListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRefundList not implemented")
}
func (UnimplementedPayRefundServiceServer) PayRefundListTotal(context.Context, *PayRefundListTotalRequest) (*PayRefundTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRefundListTotal not implemented")
}
func (UnimplementedPayRefundServiceServer) mustEmbedUnimplementedPayRefundServiceServer() {}

// UnsafePayRefundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayRefundServiceServer will
// result in compilation errors.
type UnsafePayRefundServiceServer interface {
	mustEmbedUnimplementedPayRefundServiceServer()
}

func RegisterPayRefundServiceServer(s grpc.ServiceRegistrar, srv PayRefundServiceServer) {
	s.RegisterService(&PayRefundService_ServiceDesc, srv)
}

func _PayRefundService_PayRefundCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRefundCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRefundServiceServer).PayRefundCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayRefundService_PayRefundCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRefundServiceServer).PayRefundCreate(ctx, req.(*PayRefundCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRefundService_PayRefundUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRefundUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRefundServiceServer).PayRefundUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayRefundService_PayRefundUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRefundServiceServer).PayRefundUpdate(ctx, req.(*PayRefundUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRefundService_PayRefundDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRefundDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRefundServiceServer).PayRefundDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayRefundService_PayRefundDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRefundServiceServer).PayRefundDelete(ctx, req.(*PayRefundDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRefundService_PayRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRefundServiceServer).PayRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayRefundService_PayRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRefundServiceServer).PayRefund(ctx, req.(*PayRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRefundService_PayRefundRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRefundRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRefundServiceServer).PayRefundRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayRefundService_PayRefundRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRefundServiceServer).PayRefundRecover(ctx, req.(*PayRefundRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRefundService_PayRefundList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRefundListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRefundServiceServer).PayRefundList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayRefundService_PayRefundList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRefundServiceServer).PayRefundList(ctx, req.(*PayRefundListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayRefundService_PayRefundListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRefundListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayRefundServiceServer).PayRefundListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayRefundService_PayRefundListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayRefundServiceServer).PayRefundListTotal(ctx, req.(*PayRefundListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayRefundService_ServiceDesc is the grpc.ServiceDesc for PayRefundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayRefundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "refund.PayRefundService",
	HandlerType: (*PayRefundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayRefundCreate",
			Handler:    _PayRefundService_PayRefundCreate_Handler,
		},
		{
			MethodName: "PayRefundUpdate",
			Handler:    _PayRefundService_PayRefundUpdate_Handler,
		},
		{
			MethodName: "PayRefundDelete",
			Handler:    _PayRefundService_PayRefundDelete_Handler,
		},
		{
			MethodName: "PayRefund",
			Handler:    _PayRefundService_PayRefund_Handler,
		},
		{
			MethodName: "PayRefundRecover",
			Handler:    _PayRefundService_PayRefundRecover_Handler,
		},
		{
			MethodName: "PayRefundList",
			Handler:    _PayRefundService_PayRefundList_Handler,
		},
		{
			MethodName: "PayRefundListTotal",
			Handler:    _PayRefundService_PayRefundListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay_refund.proto",
}
