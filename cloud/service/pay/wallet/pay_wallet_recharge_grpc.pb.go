// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: pay_wallet_recharge.proto

// pay_wallet_recharge 会员钱包充值

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PayWalletRechargeService_PayWalletRechargeCreate_FullMethodName    = "/wallet.PayWalletRechargeService/PayWalletRechargeCreate"
	PayWalletRechargeService_PayWalletRechargeUpdate_FullMethodName    = "/wallet.PayWalletRechargeService/PayWalletRechargeUpdate"
	PayWalletRechargeService_PayWalletRechargeDelete_FullMethodName    = "/wallet.PayWalletRechargeService/PayWalletRechargeDelete"
	PayWalletRechargeService_PayWalletRecharge_FullMethodName          = "/wallet.PayWalletRechargeService/PayWalletRecharge"
	PayWalletRechargeService_PayWalletRechargeRecover_FullMethodName   = "/wallet.PayWalletRechargeService/PayWalletRechargeRecover"
	PayWalletRechargeService_PayWalletRechargeList_FullMethodName      = "/wallet.PayWalletRechargeService/PayWalletRechargeList"
	PayWalletRechargeService_PayWalletRechargeListTotal_FullMethodName = "/wallet.PayWalletRechargeService/PayWalletRechargeListTotal"
)

// PayWalletRechargeServiceClient is the client API for PayWalletRechargeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PayWalletRechargeService 服务
type PayWalletRechargeServiceClient interface {
	PayWalletRechargeCreate(ctx context.Context, in *PayWalletRechargeCreateRequest, opts ...grpc.CallOption) (*PayWalletRechargeCreateResponse, error)
	PayWalletRechargeUpdate(ctx context.Context, in *PayWalletRechargeUpdateRequest, opts ...grpc.CallOption) (*PayWalletRechargeUpdateResponse, error)
	PayWalletRechargeDelete(ctx context.Context, in *PayWalletRechargeDeleteRequest, opts ...grpc.CallOption) (*PayWalletRechargeDeleteResponse, error)
	PayWalletRecharge(ctx context.Context, in *PayWalletRechargeRequest, opts ...grpc.CallOption) (*PayWalletRechargeResponse, error)
	PayWalletRechargeRecover(ctx context.Context, in *PayWalletRechargeRecoverRequest, opts ...grpc.CallOption) (*PayWalletRechargeRecoverResponse, error)
	PayWalletRechargeList(ctx context.Context, in *PayWalletRechargeListRequest, opts ...grpc.CallOption) (*PayWalletRechargeListResponse, error)
	PayWalletRechargeListTotal(ctx context.Context, in *PayWalletRechargeListTotalRequest, opts ...grpc.CallOption) (*PayWalletRechargeTotalResponse, error)
}

type payWalletRechargeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayWalletRechargeServiceClient(cc grpc.ClientConnInterface) PayWalletRechargeServiceClient {
	return &payWalletRechargeServiceClient{cc}
}

func (c *payWalletRechargeServiceClient) PayWalletRechargeCreate(ctx context.Context, in *PayWalletRechargeCreateRequest, opts ...grpc.CallOption) (*PayWalletRechargeCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletRechargeCreateResponse)
	err := c.cc.Invoke(ctx, PayWalletRechargeService_PayWalletRechargeCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletRechargeServiceClient) PayWalletRechargeUpdate(ctx context.Context, in *PayWalletRechargeUpdateRequest, opts ...grpc.CallOption) (*PayWalletRechargeUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletRechargeUpdateResponse)
	err := c.cc.Invoke(ctx, PayWalletRechargeService_PayWalletRechargeUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletRechargeServiceClient) PayWalletRechargeDelete(ctx context.Context, in *PayWalletRechargeDeleteRequest, opts ...grpc.CallOption) (*PayWalletRechargeDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletRechargeDeleteResponse)
	err := c.cc.Invoke(ctx, PayWalletRechargeService_PayWalletRechargeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletRechargeServiceClient) PayWalletRecharge(ctx context.Context, in *PayWalletRechargeRequest, opts ...grpc.CallOption) (*PayWalletRechargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletRechargeResponse)
	err := c.cc.Invoke(ctx, PayWalletRechargeService_PayWalletRecharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletRechargeServiceClient) PayWalletRechargeRecover(ctx context.Context, in *PayWalletRechargeRecoverRequest, opts ...grpc.CallOption) (*PayWalletRechargeRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletRechargeRecoverResponse)
	err := c.cc.Invoke(ctx, PayWalletRechargeService_PayWalletRechargeRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletRechargeServiceClient) PayWalletRechargeList(ctx context.Context, in *PayWalletRechargeListRequest, opts ...grpc.CallOption) (*PayWalletRechargeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletRechargeListResponse)
	err := c.cc.Invoke(ctx, PayWalletRechargeService_PayWalletRechargeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletRechargeServiceClient) PayWalletRechargeListTotal(ctx context.Context, in *PayWalletRechargeListTotalRequest, opts ...grpc.CallOption) (*PayWalletRechargeTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletRechargeTotalResponse)
	err := c.cc.Invoke(ctx, PayWalletRechargeService_PayWalletRechargeListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayWalletRechargeServiceServer is the server API for PayWalletRechargeService service.
// All implementations must embed UnimplementedPayWalletRechargeServiceServer
// for forward compatibility
//
// PayWalletRechargeService 服务
type PayWalletRechargeServiceServer interface {
	PayWalletRechargeCreate(context.Context, *PayWalletRechargeCreateRequest) (*PayWalletRechargeCreateResponse, error)
	PayWalletRechargeUpdate(context.Context, *PayWalletRechargeUpdateRequest) (*PayWalletRechargeUpdateResponse, error)
	PayWalletRechargeDelete(context.Context, *PayWalletRechargeDeleteRequest) (*PayWalletRechargeDeleteResponse, error)
	PayWalletRecharge(context.Context, *PayWalletRechargeRequest) (*PayWalletRechargeResponse, error)
	PayWalletRechargeRecover(context.Context, *PayWalletRechargeRecoverRequest) (*PayWalletRechargeRecoverResponse, error)
	PayWalletRechargeList(context.Context, *PayWalletRechargeListRequest) (*PayWalletRechargeListResponse, error)
	PayWalletRechargeListTotal(context.Context, *PayWalletRechargeListTotalRequest) (*PayWalletRechargeTotalResponse, error)
	mustEmbedUnimplementedPayWalletRechargeServiceServer()
}

// UnimplementedPayWalletRechargeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayWalletRechargeServiceServer struct {
}

func (UnimplementedPayWalletRechargeServiceServer) PayWalletRechargeCreate(context.Context, *PayWalletRechargeCreateRequest) (*PayWalletRechargeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletRechargeCreate not implemented")
}
func (UnimplementedPayWalletRechargeServiceServer) PayWalletRechargeUpdate(context.Context, *PayWalletRechargeUpdateRequest) (*PayWalletRechargeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletRechargeUpdate not implemented")
}
func (UnimplementedPayWalletRechargeServiceServer) PayWalletRechargeDelete(context.Context, *PayWalletRechargeDeleteRequest) (*PayWalletRechargeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletRechargeDelete not implemented")
}
func (UnimplementedPayWalletRechargeServiceServer) PayWalletRecharge(context.Context, *PayWalletRechargeRequest) (*PayWalletRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletRecharge not implemented")
}
func (UnimplementedPayWalletRechargeServiceServer) PayWalletRechargeRecover(context.Context, *PayWalletRechargeRecoverRequest) (*PayWalletRechargeRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletRechargeRecover not implemented")
}
func (UnimplementedPayWalletRechargeServiceServer) PayWalletRechargeList(context.Context, *PayWalletRechargeListRequest) (*PayWalletRechargeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletRechargeList not implemented")
}
func (UnimplementedPayWalletRechargeServiceServer) PayWalletRechargeListTotal(context.Context, *PayWalletRechargeListTotalRequest) (*PayWalletRechargeTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletRechargeListTotal not implemented")
}
func (UnimplementedPayWalletRechargeServiceServer) mustEmbedUnimplementedPayWalletRechargeServiceServer() {
}

// UnsafePayWalletRechargeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayWalletRechargeServiceServer will
// result in compilation errors.
type UnsafePayWalletRechargeServiceServer interface {
	mustEmbedUnimplementedPayWalletRechargeServiceServer()
}

func RegisterPayWalletRechargeServiceServer(s grpc.ServiceRegistrar, srv PayWalletRechargeServiceServer) {
	s.RegisterService(&PayWalletRechargeService_ServiceDesc, srv)
}

func _PayWalletRechargeService_PayWalletRechargeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletRechargeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletRechargeService_PayWalletRechargeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeCreate(ctx, req.(*PayWalletRechargeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletRechargeService_PayWalletRechargeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletRechargeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletRechargeService_PayWalletRechargeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeUpdate(ctx, req.(*PayWalletRechargeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletRechargeService_PayWalletRechargeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletRechargeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletRechargeService_PayWalletRechargeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeDelete(ctx, req.(*PayWalletRechargeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletRechargeService_PayWalletRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletRechargeServiceServer).PayWalletRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletRechargeService_PayWalletRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletRechargeServiceServer).PayWalletRecharge(ctx, req.(*PayWalletRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletRechargeService_PayWalletRechargeRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletRechargeRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletRechargeService_PayWalletRechargeRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeRecover(ctx, req.(*PayWalletRechargeRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletRechargeService_PayWalletRechargeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletRechargeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletRechargeService_PayWalletRechargeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeList(ctx, req.(*PayWalletRechargeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletRechargeService_PayWalletRechargeListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletRechargeListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletRechargeService_PayWalletRechargeListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletRechargeServiceServer).PayWalletRechargeListTotal(ctx, req.(*PayWalletRechargeListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayWalletRechargeService_ServiceDesc is the grpc.ServiceDesc for PayWalletRechargeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayWalletRechargeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.PayWalletRechargeService",
	HandlerType: (*PayWalletRechargeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayWalletRechargeCreate",
			Handler:    _PayWalletRechargeService_PayWalletRechargeCreate_Handler,
		},
		{
			MethodName: "PayWalletRechargeUpdate",
			Handler:    _PayWalletRechargeService_PayWalletRechargeUpdate_Handler,
		},
		{
			MethodName: "PayWalletRechargeDelete",
			Handler:    _PayWalletRechargeService_PayWalletRechargeDelete_Handler,
		},
		{
			MethodName: "PayWalletRecharge",
			Handler:    _PayWalletRechargeService_PayWalletRecharge_Handler,
		},
		{
			MethodName: "PayWalletRechargeRecover",
			Handler:    _PayWalletRechargeService_PayWalletRechargeRecover_Handler,
		},
		{
			MethodName: "PayWalletRechargeList",
			Handler:    _PayWalletRechargeService_PayWalletRechargeList_Handler,
		},
		{
			MethodName: "PayWalletRechargeListTotal",
			Handler:    _PayWalletRechargeService_PayWalletRechargeListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay_wallet_recharge.proto",
}
