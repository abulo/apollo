// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: pay_wallet_transaction.proto

// pay_wallet_transaction 会员钱包流水表

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PayWalletTransactionService_PayWalletTransactionCreate_FullMethodName    = "/wallet.PayWalletTransactionService/PayWalletTransactionCreate"
	PayWalletTransactionService_PayWalletTransactionUpdate_FullMethodName    = "/wallet.PayWalletTransactionService/PayWalletTransactionUpdate"
	PayWalletTransactionService_PayWalletTransactionDelete_FullMethodName    = "/wallet.PayWalletTransactionService/PayWalletTransactionDelete"
	PayWalletTransactionService_PayWalletTransaction_FullMethodName          = "/wallet.PayWalletTransactionService/PayWalletTransaction"
	PayWalletTransactionService_PayWalletTransactionRecover_FullMethodName   = "/wallet.PayWalletTransactionService/PayWalletTransactionRecover"
	PayWalletTransactionService_PayWalletTransactionList_FullMethodName      = "/wallet.PayWalletTransactionService/PayWalletTransactionList"
	PayWalletTransactionService_PayWalletTransactionListTotal_FullMethodName = "/wallet.PayWalletTransactionService/PayWalletTransactionListTotal"
)

// PayWalletTransactionServiceClient is the client API for PayWalletTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PayWalletTransactionService 服务
type PayWalletTransactionServiceClient interface {
	PayWalletTransactionCreate(ctx context.Context, in *PayWalletTransactionCreateRequest, opts ...grpc.CallOption) (*PayWalletTransactionCreateResponse, error)
	PayWalletTransactionUpdate(ctx context.Context, in *PayWalletTransactionUpdateRequest, opts ...grpc.CallOption) (*PayWalletTransactionUpdateResponse, error)
	PayWalletTransactionDelete(ctx context.Context, in *PayWalletTransactionDeleteRequest, opts ...grpc.CallOption) (*PayWalletTransactionDeleteResponse, error)
	PayWalletTransaction(ctx context.Context, in *PayWalletTransactionRequest, opts ...grpc.CallOption) (*PayWalletTransactionResponse, error)
	PayWalletTransactionRecover(ctx context.Context, in *PayWalletTransactionRecoverRequest, opts ...grpc.CallOption) (*PayWalletTransactionRecoverResponse, error)
	PayWalletTransactionList(ctx context.Context, in *PayWalletTransactionListRequest, opts ...grpc.CallOption) (*PayWalletTransactionListResponse, error)
	PayWalletTransactionListTotal(ctx context.Context, in *PayWalletTransactionListTotalRequest, opts ...grpc.CallOption) (*PayWalletTransactionTotalResponse, error)
}

type payWalletTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayWalletTransactionServiceClient(cc grpc.ClientConnInterface) PayWalletTransactionServiceClient {
	return &payWalletTransactionServiceClient{cc}
}

func (c *payWalletTransactionServiceClient) PayWalletTransactionCreate(ctx context.Context, in *PayWalletTransactionCreateRequest, opts ...grpc.CallOption) (*PayWalletTransactionCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletTransactionCreateResponse)
	err := c.cc.Invoke(ctx, PayWalletTransactionService_PayWalletTransactionCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletTransactionServiceClient) PayWalletTransactionUpdate(ctx context.Context, in *PayWalletTransactionUpdateRequest, opts ...grpc.CallOption) (*PayWalletTransactionUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletTransactionUpdateResponse)
	err := c.cc.Invoke(ctx, PayWalletTransactionService_PayWalletTransactionUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletTransactionServiceClient) PayWalletTransactionDelete(ctx context.Context, in *PayWalletTransactionDeleteRequest, opts ...grpc.CallOption) (*PayWalletTransactionDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletTransactionDeleteResponse)
	err := c.cc.Invoke(ctx, PayWalletTransactionService_PayWalletTransactionDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletTransactionServiceClient) PayWalletTransaction(ctx context.Context, in *PayWalletTransactionRequest, opts ...grpc.CallOption) (*PayWalletTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletTransactionResponse)
	err := c.cc.Invoke(ctx, PayWalletTransactionService_PayWalletTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletTransactionServiceClient) PayWalletTransactionRecover(ctx context.Context, in *PayWalletTransactionRecoverRequest, opts ...grpc.CallOption) (*PayWalletTransactionRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletTransactionRecoverResponse)
	err := c.cc.Invoke(ctx, PayWalletTransactionService_PayWalletTransactionRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletTransactionServiceClient) PayWalletTransactionList(ctx context.Context, in *PayWalletTransactionListRequest, opts ...grpc.CallOption) (*PayWalletTransactionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletTransactionListResponse)
	err := c.cc.Invoke(ctx, PayWalletTransactionService_PayWalletTransactionList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payWalletTransactionServiceClient) PayWalletTransactionListTotal(ctx context.Context, in *PayWalletTransactionListTotalRequest, opts ...grpc.CallOption) (*PayWalletTransactionTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayWalletTransactionTotalResponse)
	err := c.cc.Invoke(ctx, PayWalletTransactionService_PayWalletTransactionListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayWalletTransactionServiceServer is the server API for PayWalletTransactionService service.
// All implementations must embed UnimplementedPayWalletTransactionServiceServer
// for forward compatibility
//
// PayWalletTransactionService 服务
type PayWalletTransactionServiceServer interface {
	PayWalletTransactionCreate(context.Context, *PayWalletTransactionCreateRequest) (*PayWalletTransactionCreateResponse, error)
	PayWalletTransactionUpdate(context.Context, *PayWalletTransactionUpdateRequest) (*PayWalletTransactionUpdateResponse, error)
	PayWalletTransactionDelete(context.Context, *PayWalletTransactionDeleteRequest) (*PayWalletTransactionDeleteResponse, error)
	PayWalletTransaction(context.Context, *PayWalletTransactionRequest) (*PayWalletTransactionResponse, error)
	PayWalletTransactionRecover(context.Context, *PayWalletTransactionRecoverRequest) (*PayWalletTransactionRecoverResponse, error)
	PayWalletTransactionList(context.Context, *PayWalletTransactionListRequest) (*PayWalletTransactionListResponse, error)
	PayWalletTransactionListTotal(context.Context, *PayWalletTransactionListTotalRequest) (*PayWalletTransactionTotalResponse, error)
	mustEmbedUnimplementedPayWalletTransactionServiceServer()
}

// UnimplementedPayWalletTransactionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayWalletTransactionServiceServer struct {
}

func (UnimplementedPayWalletTransactionServiceServer) PayWalletTransactionCreate(context.Context, *PayWalletTransactionCreateRequest) (*PayWalletTransactionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletTransactionCreate not implemented")
}
func (UnimplementedPayWalletTransactionServiceServer) PayWalletTransactionUpdate(context.Context, *PayWalletTransactionUpdateRequest) (*PayWalletTransactionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletTransactionUpdate not implemented")
}
func (UnimplementedPayWalletTransactionServiceServer) PayWalletTransactionDelete(context.Context, *PayWalletTransactionDeleteRequest) (*PayWalletTransactionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletTransactionDelete not implemented")
}
func (UnimplementedPayWalletTransactionServiceServer) PayWalletTransaction(context.Context, *PayWalletTransactionRequest) (*PayWalletTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletTransaction not implemented")
}
func (UnimplementedPayWalletTransactionServiceServer) PayWalletTransactionRecover(context.Context, *PayWalletTransactionRecoverRequest) (*PayWalletTransactionRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletTransactionRecover not implemented")
}
func (UnimplementedPayWalletTransactionServiceServer) PayWalletTransactionList(context.Context, *PayWalletTransactionListRequest) (*PayWalletTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletTransactionList not implemented")
}
func (UnimplementedPayWalletTransactionServiceServer) PayWalletTransactionListTotal(context.Context, *PayWalletTransactionListTotalRequest) (*PayWalletTransactionTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayWalletTransactionListTotal not implemented")
}
func (UnimplementedPayWalletTransactionServiceServer) mustEmbedUnimplementedPayWalletTransactionServiceServer() {
}

// UnsafePayWalletTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayWalletTransactionServiceServer will
// result in compilation errors.
type UnsafePayWalletTransactionServiceServer interface {
	mustEmbedUnimplementedPayWalletTransactionServiceServer()
}

func RegisterPayWalletTransactionServiceServer(s grpc.ServiceRegistrar, srv PayWalletTransactionServiceServer) {
	s.RegisterService(&PayWalletTransactionService_ServiceDesc, srv)
}

func _PayWalletTransactionService_PayWalletTransactionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletTransactionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletTransactionService_PayWalletTransactionCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionCreate(ctx, req.(*PayWalletTransactionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletTransactionService_PayWalletTransactionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletTransactionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletTransactionService_PayWalletTransactionUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionUpdate(ctx, req.(*PayWalletTransactionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletTransactionService_PayWalletTransactionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletTransactionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletTransactionService_PayWalletTransactionDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionDelete(ctx, req.(*PayWalletTransactionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletTransactionService_PayWalletTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletTransactionService_PayWalletTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransaction(ctx, req.(*PayWalletTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletTransactionService_PayWalletTransactionRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletTransactionRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletTransactionService_PayWalletTransactionRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionRecover(ctx, req.(*PayWalletTransactionRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletTransactionService_PayWalletTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletTransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletTransactionService_PayWalletTransactionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionList(ctx, req.(*PayWalletTransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayWalletTransactionService_PayWalletTransactionListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayWalletTransactionListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayWalletTransactionService_PayWalletTransactionListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayWalletTransactionServiceServer).PayWalletTransactionListTotal(ctx, req.(*PayWalletTransactionListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayWalletTransactionService_ServiceDesc is the grpc.ServiceDesc for PayWalletTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayWalletTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wallet.PayWalletTransactionService",
	HandlerType: (*PayWalletTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayWalletTransactionCreate",
			Handler:    _PayWalletTransactionService_PayWalletTransactionCreate_Handler,
		},
		{
			MethodName: "PayWalletTransactionUpdate",
			Handler:    _PayWalletTransactionService_PayWalletTransactionUpdate_Handler,
		},
		{
			MethodName: "PayWalletTransactionDelete",
			Handler:    _PayWalletTransactionService_PayWalletTransactionDelete_Handler,
		},
		{
			MethodName: "PayWalletTransaction",
			Handler:    _PayWalletTransactionService_PayWalletTransaction_Handler,
		},
		{
			MethodName: "PayWalletTransactionRecover",
			Handler:    _PayWalletTransactionService_PayWalletTransactionRecover_Handler,
		},
		{
			MethodName: "PayWalletTransactionList",
			Handler:    _PayWalletTransactionService_PayWalletTransactionList_Handler,
		},
		{
			MethodName: "PayWalletTransactionListTotal",
			Handler:    _PayWalletTransactionService_PayWalletTransactionListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pay_wallet_transaction.proto",
}
