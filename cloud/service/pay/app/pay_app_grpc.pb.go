// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: app/pay_app.proto

// pay_app 支付应用信息

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PayAppService_PayAppCreate_FullMethodName  = "/app.PayAppService/PayAppCreate"
	PayAppService_PayAppUpdate_FullMethodName  = "/app.PayAppService/PayAppUpdate"
	PayAppService_PayAppDelete_FullMethodName  = "/app.PayAppService/PayAppDelete"
	PayAppService_PayApp_FullMethodName        = "/app.PayAppService/PayApp"
	PayAppService_PayAppRecover_FullMethodName = "/app.PayAppService/PayAppRecover"
	PayAppService_PayAppList_FullMethodName    = "/app.PayAppService/PayAppList"
)

// PayAppServiceClient is the client API for PayAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PayAppService 服务
type PayAppServiceClient interface {
	PayAppCreate(ctx context.Context, in *PayAppCreateRequest, opts ...grpc.CallOption) (*PayAppCreateResponse, error)
	PayAppUpdate(ctx context.Context, in *PayAppUpdateRequest, opts ...grpc.CallOption) (*PayAppUpdateResponse, error)
	PayAppDelete(ctx context.Context, in *PayAppDeleteRequest, opts ...grpc.CallOption) (*PayAppDeleteResponse, error)
	PayApp(ctx context.Context, in *PayAppRequest, opts ...grpc.CallOption) (*PayAppResponse, error)
	PayAppRecover(ctx context.Context, in *PayAppRecoverRequest, opts ...grpc.CallOption) (*PayAppRecoverResponse, error)
	PayAppList(ctx context.Context, in *PayAppListRequest, opts ...grpc.CallOption) (*PayAppListResponse, error)
}

type payAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayAppServiceClient(cc grpc.ClientConnInterface) PayAppServiceClient {
	return &payAppServiceClient{cc}
}

func (c *payAppServiceClient) PayAppCreate(ctx context.Context, in *PayAppCreateRequest, opts ...grpc.CallOption) (*PayAppCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayAppCreateResponse)
	err := c.cc.Invoke(ctx, PayAppService_PayAppCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAppServiceClient) PayAppUpdate(ctx context.Context, in *PayAppUpdateRequest, opts ...grpc.CallOption) (*PayAppUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayAppUpdateResponse)
	err := c.cc.Invoke(ctx, PayAppService_PayAppUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAppServiceClient) PayAppDelete(ctx context.Context, in *PayAppDeleteRequest, opts ...grpc.CallOption) (*PayAppDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayAppDeleteResponse)
	err := c.cc.Invoke(ctx, PayAppService_PayAppDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAppServiceClient) PayApp(ctx context.Context, in *PayAppRequest, opts ...grpc.CallOption) (*PayAppResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayAppResponse)
	err := c.cc.Invoke(ctx, PayAppService_PayApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAppServiceClient) PayAppRecover(ctx context.Context, in *PayAppRecoverRequest, opts ...grpc.CallOption) (*PayAppRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayAppRecoverResponse)
	err := c.cc.Invoke(ctx, PayAppService_PayAppRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payAppServiceClient) PayAppList(ctx context.Context, in *PayAppListRequest, opts ...grpc.CallOption) (*PayAppListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayAppListResponse)
	err := c.cc.Invoke(ctx, PayAppService_PayAppList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayAppServiceServer is the server API for PayAppService service.
// All implementations must embed UnimplementedPayAppServiceServer
// for forward compatibility
//
// PayAppService 服务
type PayAppServiceServer interface {
	PayAppCreate(context.Context, *PayAppCreateRequest) (*PayAppCreateResponse, error)
	PayAppUpdate(context.Context, *PayAppUpdateRequest) (*PayAppUpdateResponse, error)
	PayAppDelete(context.Context, *PayAppDeleteRequest) (*PayAppDeleteResponse, error)
	PayApp(context.Context, *PayAppRequest) (*PayAppResponse, error)
	PayAppRecover(context.Context, *PayAppRecoverRequest) (*PayAppRecoverResponse, error)
	PayAppList(context.Context, *PayAppListRequest) (*PayAppListResponse, error)
	mustEmbedUnimplementedPayAppServiceServer()
}

// UnimplementedPayAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayAppServiceServer struct {
}

func (UnimplementedPayAppServiceServer) PayAppCreate(context.Context, *PayAppCreateRequest) (*PayAppCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAppCreate not implemented")
}
func (UnimplementedPayAppServiceServer) PayAppUpdate(context.Context, *PayAppUpdateRequest) (*PayAppUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAppUpdate not implemented")
}
func (UnimplementedPayAppServiceServer) PayAppDelete(context.Context, *PayAppDeleteRequest) (*PayAppDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAppDelete not implemented")
}
func (UnimplementedPayAppServiceServer) PayApp(context.Context, *PayAppRequest) (*PayAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayApp not implemented")
}
func (UnimplementedPayAppServiceServer) PayAppRecover(context.Context, *PayAppRecoverRequest) (*PayAppRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAppRecover not implemented")
}
func (UnimplementedPayAppServiceServer) PayAppList(context.Context, *PayAppListRequest) (*PayAppListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayAppList not implemented")
}
func (UnimplementedPayAppServiceServer) mustEmbedUnimplementedPayAppServiceServer() {}

// UnsafePayAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayAppServiceServer will
// result in compilation errors.
type UnsafePayAppServiceServer interface {
	mustEmbedUnimplementedPayAppServiceServer()
}

func RegisterPayAppServiceServer(s grpc.ServiceRegistrar, srv PayAppServiceServer) {
	s.RegisterService(&PayAppService_ServiceDesc, srv)
}

func _PayAppService_PayAppCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAppCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayAppServiceServer).PayAppCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayAppService_PayAppCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayAppServiceServer).PayAppCreate(ctx, req.(*PayAppCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayAppService_PayAppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAppUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayAppServiceServer).PayAppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayAppService_PayAppUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayAppServiceServer).PayAppUpdate(ctx, req.(*PayAppUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayAppService_PayAppDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAppDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayAppServiceServer).PayAppDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayAppService_PayAppDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayAppServiceServer).PayAppDelete(ctx, req.(*PayAppDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayAppService_PayApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayAppServiceServer).PayApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayAppService_PayApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayAppServiceServer).PayApp(ctx, req.(*PayAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayAppService_PayAppRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAppRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayAppServiceServer).PayAppRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayAppService_PayAppRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayAppServiceServer).PayAppRecover(ctx, req.(*PayAppRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayAppService_PayAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayAppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayAppServiceServer).PayAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayAppService_PayAppList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayAppServiceServer).PayAppList(ctx, req.(*PayAppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayAppService_ServiceDesc is the grpc.ServiceDesc for PayAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.PayAppService",
	HandlerType: (*PayAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayAppCreate",
			Handler:    _PayAppService_PayAppCreate_Handler,
		},
		{
			MethodName: "PayAppUpdate",
			Handler:    _PayAppService_PayAppUpdate_Handler,
		},
		{
			MethodName: "PayAppDelete",
			Handler:    _PayAppService_PayAppDelete_Handler,
		},
		{
			MethodName: "PayApp",
			Handler:    _PayAppService_PayApp_Handler,
		},
		{
			MethodName: "PayAppRecover",
			Handler:    _PayAppService_PayAppRecover_Handler,
		},
		{
			MethodName: "PayAppList",
			Handler:    _PayAppService_PayAppList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/pay_app.proto",
}
