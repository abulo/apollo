// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: notify/pay_notify_log.proto

// pay_notify_log 支付通知日志

package notify

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PayNotifyLogService_PayNotifyLogCreate_FullMethodName  = "/notify.PayNotifyLogService/PayNotifyLogCreate"
	PayNotifyLogService_PayNotifyLogUpdate_FullMethodName  = "/notify.PayNotifyLogService/PayNotifyLogUpdate"
	PayNotifyLogService_PayNotifyLogDelete_FullMethodName  = "/notify.PayNotifyLogService/PayNotifyLogDelete"
	PayNotifyLogService_PayNotifyLog_FullMethodName        = "/notify.PayNotifyLogService/PayNotifyLog"
	PayNotifyLogService_PayNotifyLogRecover_FullMethodName = "/notify.PayNotifyLogService/PayNotifyLogRecover"
	PayNotifyLogService_PayNotifyLogList_FullMethodName    = "/notify.PayNotifyLogService/PayNotifyLogList"
)

// PayNotifyLogServiceClient is the client API for PayNotifyLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PayNotifyLogService 服务
type PayNotifyLogServiceClient interface {
	PayNotifyLogCreate(ctx context.Context, in *PayNotifyLogCreateRequest, opts ...grpc.CallOption) (*PayNotifyLogCreateResponse, error)
	PayNotifyLogUpdate(ctx context.Context, in *PayNotifyLogUpdateRequest, opts ...grpc.CallOption) (*PayNotifyLogUpdateResponse, error)
	PayNotifyLogDelete(ctx context.Context, in *PayNotifyLogDeleteRequest, opts ...grpc.CallOption) (*PayNotifyLogDeleteResponse, error)
	PayNotifyLog(ctx context.Context, in *PayNotifyLogRequest, opts ...grpc.CallOption) (*PayNotifyLogResponse, error)
	PayNotifyLogRecover(ctx context.Context, in *PayNotifyLogRecoverRequest, opts ...grpc.CallOption) (*PayNotifyLogRecoverResponse, error)
	PayNotifyLogList(ctx context.Context, in *PayNotifyLogListRequest, opts ...grpc.CallOption) (*PayNotifyLogListResponse, error)
}

type payNotifyLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayNotifyLogServiceClient(cc grpc.ClientConnInterface) PayNotifyLogServiceClient {
	return &payNotifyLogServiceClient{cc}
}

func (c *payNotifyLogServiceClient) PayNotifyLogCreate(ctx context.Context, in *PayNotifyLogCreateRequest, opts ...grpc.CallOption) (*PayNotifyLogCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayNotifyLogCreateResponse)
	err := c.cc.Invoke(ctx, PayNotifyLogService_PayNotifyLogCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payNotifyLogServiceClient) PayNotifyLogUpdate(ctx context.Context, in *PayNotifyLogUpdateRequest, opts ...grpc.CallOption) (*PayNotifyLogUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayNotifyLogUpdateResponse)
	err := c.cc.Invoke(ctx, PayNotifyLogService_PayNotifyLogUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payNotifyLogServiceClient) PayNotifyLogDelete(ctx context.Context, in *PayNotifyLogDeleteRequest, opts ...grpc.CallOption) (*PayNotifyLogDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayNotifyLogDeleteResponse)
	err := c.cc.Invoke(ctx, PayNotifyLogService_PayNotifyLogDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payNotifyLogServiceClient) PayNotifyLog(ctx context.Context, in *PayNotifyLogRequest, opts ...grpc.CallOption) (*PayNotifyLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayNotifyLogResponse)
	err := c.cc.Invoke(ctx, PayNotifyLogService_PayNotifyLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payNotifyLogServiceClient) PayNotifyLogRecover(ctx context.Context, in *PayNotifyLogRecoverRequest, opts ...grpc.CallOption) (*PayNotifyLogRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayNotifyLogRecoverResponse)
	err := c.cc.Invoke(ctx, PayNotifyLogService_PayNotifyLogRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payNotifyLogServiceClient) PayNotifyLogList(ctx context.Context, in *PayNotifyLogListRequest, opts ...grpc.CallOption) (*PayNotifyLogListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayNotifyLogListResponse)
	err := c.cc.Invoke(ctx, PayNotifyLogService_PayNotifyLogList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayNotifyLogServiceServer is the server API for PayNotifyLogService service.
// All implementations must embed UnimplementedPayNotifyLogServiceServer
// for forward compatibility
//
// PayNotifyLogService 服务
type PayNotifyLogServiceServer interface {
	PayNotifyLogCreate(context.Context, *PayNotifyLogCreateRequest) (*PayNotifyLogCreateResponse, error)
	PayNotifyLogUpdate(context.Context, *PayNotifyLogUpdateRequest) (*PayNotifyLogUpdateResponse, error)
	PayNotifyLogDelete(context.Context, *PayNotifyLogDeleteRequest) (*PayNotifyLogDeleteResponse, error)
	PayNotifyLog(context.Context, *PayNotifyLogRequest) (*PayNotifyLogResponse, error)
	PayNotifyLogRecover(context.Context, *PayNotifyLogRecoverRequest) (*PayNotifyLogRecoverResponse, error)
	PayNotifyLogList(context.Context, *PayNotifyLogListRequest) (*PayNotifyLogListResponse, error)
	mustEmbedUnimplementedPayNotifyLogServiceServer()
}

// UnimplementedPayNotifyLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayNotifyLogServiceServer struct {
}

func (UnimplementedPayNotifyLogServiceServer) PayNotifyLogCreate(context.Context, *PayNotifyLogCreateRequest) (*PayNotifyLogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotifyLogCreate not implemented")
}
func (UnimplementedPayNotifyLogServiceServer) PayNotifyLogUpdate(context.Context, *PayNotifyLogUpdateRequest) (*PayNotifyLogUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotifyLogUpdate not implemented")
}
func (UnimplementedPayNotifyLogServiceServer) PayNotifyLogDelete(context.Context, *PayNotifyLogDeleteRequest) (*PayNotifyLogDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotifyLogDelete not implemented")
}
func (UnimplementedPayNotifyLogServiceServer) PayNotifyLog(context.Context, *PayNotifyLogRequest) (*PayNotifyLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotifyLog not implemented")
}
func (UnimplementedPayNotifyLogServiceServer) PayNotifyLogRecover(context.Context, *PayNotifyLogRecoverRequest) (*PayNotifyLogRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotifyLogRecover not implemented")
}
func (UnimplementedPayNotifyLogServiceServer) PayNotifyLogList(context.Context, *PayNotifyLogListRequest) (*PayNotifyLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotifyLogList not implemented")
}
func (UnimplementedPayNotifyLogServiceServer) mustEmbedUnimplementedPayNotifyLogServiceServer() {}

// UnsafePayNotifyLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayNotifyLogServiceServer will
// result in compilation errors.
type UnsafePayNotifyLogServiceServer interface {
	mustEmbedUnimplementedPayNotifyLogServiceServer()
}

func RegisterPayNotifyLogServiceServer(s grpc.ServiceRegistrar, srv PayNotifyLogServiceServer) {
	s.RegisterService(&PayNotifyLogService_ServiceDesc, srv)
}

func _PayNotifyLogService_PayNotifyLogCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyLogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayNotifyLogService_PayNotifyLogCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogCreate(ctx, req.(*PayNotifyLogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayNotifyLogService_PayNotifyLogUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyLogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayNotifyLogService_PayNotifyLogUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogUpdate(ctx, req.(*PayNotifyLogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayNotifyLogService_PayNotifyLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyLogDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayNotifyLogService_PayNotifyLogDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogDelete(ctx, req.(*PayNotifyLogDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayNotifyLogService_PayNotifyLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayNotifyLogServiceServer).PayNotifyLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayNotifyLogService_PayNotifyLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayNotifyLogServiceServer).PayNotifyLog(ctx, req.(*PayNotifyLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayNotifyLogService_PayNotifyLogRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyLogRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayNotifyLogService_PayNotifyLogRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogRecover(ctx, req.(*PayNotifyLogRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayNotifyLogService_PayNotifyLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayNotifyLogService_PayNotifyLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayNotifyLogServiceServer).PayNotifyLogList(ctx, req.(*PayNotifyLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayNotifyLogService_ServiceDesc is the grpc.ServiceDesc for PayNotifyLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayNotifyLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notify.PayNotifyLogService",
	HandlerType: (*PayNotifyLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayNotifyLogCreate",
			Handler:    _PayNotifyLogService_PayNotifyLogCreate_Handler,
		},
		{
			MethodName: "PayNotifyLogUpdate",
			Handler:    _PayNotifyLogService_PayNotifyLogUpdate_Handler,
		},
		{
			MethodName: "PayNotifyLogDelete",
			Handler:    _PayNotifyLogService_PayNotifyLogDelete_Handler,
		},
		{
			MethodName: "PayNotifyLog",
			Handler:    _PayNotifyLogService_PayNotifyLog_Handler,
		},
		{
			MethodName: "PayNotifyLogRecover",
			Handler:    _PayNotifyLogService_PayNotifyLogRecover_Handler,
		},
		{
			MethodName: "PayNotifyLogList",
			Handler:    _PayNotifyLogService_PayNotifyLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify/pay_notify_log.proto",
}
