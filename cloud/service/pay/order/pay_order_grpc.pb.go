// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: order/pay_order.proto

// pay_order 支付订单

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PayOrderService_PayOrderCreate_FullMethodName    = "/order.PayOrderService/PayOrderCreate"
	PayOrderService_PayOrderUpdate_FullMethodName    = "/order.PayOrderService/PayOrderUpdate"
	PayOrderService_PayOrderDelete_FullMethodName    = "/order.PayOrderService/PayOrderDelete"
	PayOrderService_PayOrder_FullMethodName          = "/order.PayOrderService/PayOrder"
	PayOrderService_PayOrderRecover_FullMethodName   = "/order.PayOrderService/PayOrderRecover"
	PayOrderService_PayOrderList_FullMethodName      = "/order.PayOrderService/PayOrderList"
	PayOrderService_PayOrderListTotal_FullMethodName = "/order.PayOrderService/PayOrderListTotal"
)

// PayOrderServiceClient is the client API for PayOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PayOrderService 服务
type PayOrderServiceClient interface {
	PayOrderCreate(ctx context.Context, in *PayOrderCreateRequest, opts ...grpc.CallOption) (*PayOrderCreateResponse, error)
	PayOrderUpdate(ctx context.Context, in *PayOrderUpdateRequest, opts ...grpc.CallOption) (*PayOrderUpdateResponse, error)
	PayOrderDelete(ctx context.Context, in *PayOrderDeleteRequest, opts ...grpc.CallOption) (*PayOrderDeleteResponse, error)
	PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error)
	PayOrderRecover(ctx context.Context, in *PayOrderRecoverRequest, opts ...grpc.CallOption) (*PayOrderRecoverResponse, error)
	PayOrderList(ctx context.Context, in *PayOrderListRequest, opts ...grpc.CallOption) (*PayOrderListResponse, error)
	PayOrderListTotal(ctx context.Context, in *PayOrderListTotalRequest, opts ...grpc.CallOption) (*PayOrderTotalResponse, error)
}

type payOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayOrderServiceClient(cc grpc.ClientConnInterface) PayOrderServiceClient {
	return &payOrderServiceClient{cc}
}

func (c *payOrderServiceClient) PayOrderCreate(ctx context.Context, in *PayOrderCreateRequest, opts ...grpc.CallOption) (*PayOrderCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOrderCreateResponse)
	err := c.cc.Invoke(ctx, PayOrderService_PayOrderCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderServiceClient) PayOrderUpdate(ctx context.Context, in *PayOrderUpdateRequest, opts ...grpc.CallOption) (*PayOrderUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOrderUpdateResponse)
	err := c.cc.Invoke(ctx, PayOrderService_PayOrderUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderServiceClient) PayOrderDelete(ctx context.Context, in *PayOrderDeleteRequest, opts ...grpc.CallOption) (*PayOrderDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOrderDeleteResponse)
	err := c.cc.Invoke(ctx, PayOrderService_PayOrderDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderServiceClient) PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOrderResponse)
	err := c.cc.Invoke(ctx, PayOrderService_PayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderServiceClient) PayOrderRecover(ctx context.Context, in *PayOrderRecoverRequest, opts ...grpc.CallOption) (*PayOrderRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOrderRecoverResponse)
	err := c.cc.Invoke(ctx, PayOrderService_PayOrderRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderServiceClient) PayOrderList(ctx context.Context, in *PayOrderListRequest, opts ...grpc.CallOption) (*PayOrderListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOrderListResponse)
	err := c.cc.Invoke(ctx, PayOrderService_PayOrderList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payOrderServiceClient) PayOrderListTotal(ctx context.Context, in *PayOrderListTotalRequest, opts ...grpc.CallOption) (*PayOrderTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOrderTotalResponse)
	err := c.cc.Invoke(ctx, PayOrderService_PayOrderListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayOrderServiceServer is the server API for PayOrderService service.
// All implementations must embed UnimplementedPayOrderServiceServer
// for forward compatibility
//
// PayOrderService 服务
type PayOrderServiceServer interface {
	PayOrderCreate(context.Context, *PayOrderCreateRequest) (*PayOrderCreateResponse, error)
	PayOrderUpdate(context.Context, *PayOrderUpdateRequest) (*PayOrderUpdateResponse, error)
	PayOrderDelete(context.Context, *PayOrderDeleteRequest) (*PayOrderDeleteResponse, error)
	PayOrder(context.Context, *PayOrderRequest) (*PayOrderResponse, error)
	PayOrderRecover(context.Context, *PayOrderRecoverRequest) (*PayOrderRecoverResponse, error)
	PayOrderList(context.Context, *PayOrderListRequest) (*PayOrderListResponse, error)
	PayOrderListTotal(context.Context, *PayOrderListTotalRequest) (*PayOrderTotalResponse, error)
	mustEmbedUnimplementedPayOrderServiceServer()
}

// UnimplementedPayOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayOrderServiceServer struct {
}

func (UnimplementedPayOrderServiceServer) PayOrderCreate(context.Context, *PayOrderCreateRequest) (*PayOrderCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderCreate not implemented")
}
func (UnimplementedPayOrderServiceServer) PayOrderUpdate(context.Context, *PayOrderUpdateRequest) (*PayOrderUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderUpdate not implemented")
}
func (UnimplementedPayOrderServiceServer) PayOrderDelete(context.Context, *PayOrderDeleteRequest) (*PayOrderDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderDelete not implemented")
}
func (UnimplementedPayOrderServiceServer) PayOrder(context.Context, *PayOrderRequest) (*PayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrder not implemented")
}
func (UnimplementedPayOrderServiceServer) PayOrderRecover(context.Context, *PayOrderRecoverRequest) (*PayOrderRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderRecover not implemented")
}
func (UnimplementedPayOrderServiceServer) PayOrderList(context.Context, *PayOrderListRequest) (*PayOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderList not implemented")
}
func (UnimplementedPayOrderServiceServer) PayOrderListTotal(context.Context, *PayOrderListTotalRequest) (*PayOrderTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrderListTotal not implemented")
}
func (UnimplementedPayOrderServiceServer) mustEmbedUnimplementedPayOrderServiceServer() {}

// UnsafePayOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayOrderServiceServer will
// result in compilation errors.
type UnsafePayOrderServiceServer interface {
	mustEmbedUnimplementedPayOrderServiceServer()
}

func RegisterPayOrderServiceServer(s grpc.ServiceRegistrar, srv PayOrderServiceServer) {
	s.RegisterService(&PayOrderService_ServiceDesc, srv)
}

func _PayOrderService_PayOrderCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServiceServer).PayOrderCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayOrderService_PayOrderCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServiceServer).PayOrderCreate(ctx, req.(*PayOrderCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrderService_PayOrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServiceServer).PayOrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayOrderService_PayOrderUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServiceServer).PayOrderUpdate(ctx, req.(*PayOrderUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrderService_PayOrderDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServiceServer).PayOrderDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayOrderService_PayOrderDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServiceServer).PayOrderDelete(ctx, req.(*PayOrderDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrderService_PayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServiceServer).PayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayOrderService_PayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServiceServer).PayOrder(ctx, req.(*PayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrderService_PayOrderRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServiceServer).PayOrderRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayOrderService_PayOrderRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServiceServer).PayOrderRecover(ctx, req.(*PayOrderRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrderService_PayOrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServiceServer).PayOrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayOrderService_PayOrderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServiceServer).PayOrderList(ctx, req.(*PayOrderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayOrderService_PayOrderListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayOrderServiceServer).PayOrderListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayOrderService_PayOrderListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayOrderServiceServer).PayOrderListTotal(ctx, req.(*PayOrderListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayOrderService_ServiceDesc is the grpc.ServiceDesc for PayOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.PayOrderService",
	HandlerType: (*PayOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayOrderCreate",
			Handler:    _PayOrderService_PayOrderCreate_Handler,
		},
		{
			MethodName: "PayOrderUpdate",
			Handler:    _PayOrderService_PayOrderUpdate_Handler,
		},
		{
			MethodName: "PayOrderDelete",
			Handler:    _PayOrderService_PayOrderDelete_Handler,
		},
		{
			MethodName: "PayOrder",
			Handler:    _PayOrderService_PayOrder_Handler,
		},
		{
			MethodName: "PayOrderRecover",
			Handler:    _PayOrderService_PayOrderRecover_Handler,
		},
		{
			MethodName: "PayOrderList",
			Handler:    _PayOrderService_PayOrderList_Handler,
		},
		{
			MethodName: "PayOrderListTotal",
			Handler:    _PayOrderService_PayOrderListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order/pay_order.proto",
}
