// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: logger/system_operate_log.proto

// system_operate_log 操作日志

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SystemOperateLogService_SystemOperateLogCreate_FullMethodName    = "/logger.SystemOperateLogService/SystemOperateLogCreate"
	SystemOperateLogService_SystemOperateLogDelete_FullMethodName    = "/logger.SystemOperateLogService/SystemOperateLogDelete"
	SystemOperateLogService_SystemOperateLogDrop_FullMethodName      = "/logger.SystemOperateLogService/SystemOperateLogDrop"
	SystemOperateLogService_SystemOperateLog_FullMethodName          = "/logger.SystemOperateLogService/SystemOperateLog"
	SystemOperateLogService_SystemOperateLogList_FullMethodName      = "/logger.SystemOperateLogService/SystemOperateLogList"
	SystemOperateLogService_SystemOperateLogListTotal_FullMethodName = "/logger.SystemOperateLogService/SystemOperateLogListTotal"
)

// SystemOperateLogServiceClient is the client API for SystemOperateLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemOperateLogService 服务
type SystemOperateLogServiceClient interface {
	SystemOperateLogCreate(ctx context.Context, in *SystemOperateLogCreateRequest, opts ...grpc.CallOption) (*SystemOperateLogCreateResponse, error)
	SystemOperateLogDelete(ctx context.Context, in *SystemOperateLogDeleteRequest, opts ...grpc.CallOption) (*SystemOperateLogDeleteResponse, error)
	SystemOperateLogDrop(ctx context.Context, in *SystemOperateLogDropRequest, opts ...grpc.CallOption) (*SystemOperateLogDropResponse, error)
	SystemOperateLog(ctx context.Context, in *SystemOperateLogRequest, opts ...grpc.CallOption) (*SystemOperateLogResponse, error)
	SystemOperateLogList(ctx context.Context, in *SystemOperateLogListRequest, opts ...grpc.CallOption) (*SystemOperateLogListResponse, error)
	SystemOperateLogListTotal(ctx context.Context, in *SystemOperateLogListTotalRequest, opts ...grpc.CallOption) (*SystemOperateLogTotalResponse, error)
}

type systemOperateLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemOperateLogServiceClient(cc grpc.ClientConnInterface) SystemOperateLogServiceClient {
	return &systemOperateLogServiceClient{cc}
}

func (c *systemOperateLogServiceClient) SystemOperateLogCreate(ctx context.Context, in *SystemOperateLogCreateRequest, opts ...grpc.CallOption) (*SystemOperateLogCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemOperateLogCreateResponse)
	err := c.cc.Invoke(ctx, SystemOperateLogService_SystemOperateLogCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemOperateLogServiceClient) SystemOperateLogDelete(ctx context.Context, in *SystemOperateLogDeleteRequest, opts ...grpc.CallOption) (*SystemOperateLogDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemOperateLogDeleteResponse)
	err := c.cc.Invoke(ctx, SystemOperateLogService_SystemOperateLogDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemOperateLogServiceClient) SystemOperateLogDrop(ctx context.Context, in *SystemOperateLogDropRequest, opts ...grpc.CallOption) (*SystemOperateLogDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemOperateLogDropResponse)
	err := c.cc.Invoke(ctx, SystemOperateLogService_SystemOperateLogDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemOperateLogServiceClient) SystemOperateLog(ctx context.Context, in *SystemOperateLogRequest, opts ...grpc.CallOption) (*SystemOperateLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemOperateLogResponse)
	err := c.cc.Invoke(ctx, SystemOperateLogService_SystemOperateLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemOperateLogServiceClient) SystemOperateLogList(ctx context.Context, in *SystemOperateLogListRequest, opts ...grpc.CallOption) (*SystemOperateLogListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemOperateLogListResponse)
	err := c.cc.Invoke(ctx, SystemOperateLogService_SystemOperateLogList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemOperateLogServiceClient) SystemOperateLogListTotal(ctx context.Context, in *SystemOperateLogListTotalRequest, opts ...grpc.CallOption) (*SystemOperateLogTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemOperateLogTotalResponse)
	err := c.cc.Invoke(ctx, SystemOperateLogService_SystemOperateLogListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemOperateLogServiceServer is the server API for SystemOperateLogService service.
// All implementations must embed UnimplementedSystemOperateLogServiceServer
// for forward compatibility
//
// SystemOperateLogService 服务
type SystemOperateLogServiceServer interface {
	SystemOperateLogCreate(context.Context, *SystemOperateLogCreateRequest) (*SystemOperateLogCreateResponse, error)
	SystemOperateLogDelete(context.Context, *SystemOperateLogDeleteRequest) (*SystemOperateLogDeleteResponse, error)
	SystemOperateLogDrop(context.Context, *SystemOperateLogDropRequest) (*SystemOperateLogDropResponse, error)
	SystemOperateLog(context.Context, *SystemOperateLogRequest) (*SystemOperateLogResponse, error)
	SystemOperateLogList(context.Context, *SystemOperateLogListRequest) (*SystemOperateLogListResponse, error)
	SystemOperateLogListTotal(context.Context, *SystemOperateLogListTotalRequest) (*SystemOperateLogTotalResponse, error)
	mustEmbedUnimplementedSystemOperateLogServiceServer()
}

// UnimplementedSystemOperateLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemOperateLogServiceServer struct {
}

func (UnimplementedSystemOperateLogServiceServer) SystemOperateLogCreate(context.Context, *SystemOperateLogCreateRequest) (*SystemOperateLogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemOperateLogCreate not implemented")
}
func (UnimplementedSystemOperateLogServiceServer) SystemOperateLogDelete(context.Context, *SystemOperateLogDeleteRequest) (*SystemOperateLogDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemOperateLogDelete not implemented")
}
func (UnimplementedSystemOperateLogServiceServer) SystemOperateLogDrop(context.Context, *SystemOperateLogDropRequest) (*SystemOperateLogDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemOperateLogDrop not implemented")
}
func (UnimplementedSystemOperateLogServiceServer) SystemOperateLog(context.Context, *SystemOperateLogRequest) (*SystemOperateLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemOperateLog not implemented")
}
func (UnimplementedSystemOperateLogServiceServer) SystemOperateLogList(context.Context, *SystemOperateLogListRequest) (*SystemOperateLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemOperateLogList not implemented")
}
func (UnimplementedSystemOperateLogServiceServer) SystemOperateLogListTotal(context.Context, *SystemOperateLogListTotalRequest) (*SystemOperateLogTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemOperateLogListTotal not implemented")
}
func (UnimplementedSystemOperateLogServiceServer) mustEmbedUnimplementedSystemOperateLogServiceServer() {
}

// UnsafeSystemOperateLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemOperateLogServiceServer will
// result in compilation errors.
type UnsafeSystemOperateLogServiceServer interface {
	mustEmbedUnimplementedSystemOperateLogServiceServer()
}

func RegisterSystemOperateLogServiceServer(s grpc.ServiceRegistrar, srv SystemOperateLogServiceServer) {
	s.RegisterService(&SystemOperateLogService_ServiceDesc, srv)
}

func _SystemOperateLogService_SystemOperateLogCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemOperateLogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemOperateLogService_SystemOperateLogCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogCreate(ctx, req.(*SystemOperateLogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemOperateLogService_SystemOperateLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemOperateLogDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemOperateLogService_SystemOperateLogDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogDelete(ctx, req.(*SystemOperateLogDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemOperateLogService_SystemOperateLogDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemOperateLogDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemOperateLogService_SystemOperateLogDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogDrop(ctx, req.(*SystemOperateLogDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemOperateLogService_SystemOperateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemOperateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemOperateLogServiceServer).SystemOperateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemOperateLogService_SystemOperateLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemOperateLogServiceServer).SystemOperateLog(ctx, req.(*SystemOperateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemOperateLogService_SystemOperateLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemOperateLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemOperateLogService_SystemOperateLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogList(ctx, req.(*SystemOperateLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemOperateLogService_SystemOperateLogListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemOperateLogListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemOperateLogService_SystemOperateLogListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemOperateLogServiceServer).SystemOperateLogListTotal(ctx, req.(*SystemOperateLogListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemOperateLogService_ServiceDesc is the grpc.ServiceDesc for SystemOperateLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemOperateLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.SystemOperateLogService",
	HandlerType: (*SystemOperateLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemOperateLogCreate",
			Handler:    _SystemOperateLogService_SystemOperateLogCreate_Handler,
		},
		{
			MethodName: "SystemOperateLogDelete",
			Handler:    _SystemOperateLogService_SystemOperateLogDelete_Handler,
		},
		{
			MethodName: "SystemOperateLogDrop",
			Handler:    _SystemOperateLogService_SystemOperateLogDrop_Handler,
		},
		{
			MethodName: "SystemOperateLog",
			Handler:    _SystemOperateLogService_SystemOperateLog_Handler,
		},
		{
			MethodName: "SystemOperateLogList",
			Handler:    _SystemOperateLogService_SystemOperateLogList_Handler,
		},
		{
			MethodName: "SystemOperateLogListTotal",
			Handler:    _SystemOperateLogService_SystemOperateLogListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger/system_operate_log.proto",
}
