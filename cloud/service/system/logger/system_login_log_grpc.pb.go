// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: logger/system_login_log.proto

// system_login_log 登录日志

package logger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SystemLoginLogService_SystemLoginLogCreate_FullMethodName    = "/logger.SystemLoginLogService/SystemLoginLogCreate"
	SystemLoginLogService_SystemLoginLogDelete_FullMethodName    = "/logger.SystemLoginLogService/SystemLoginLogDelete"
	SystemLoginLogService_SystemLoginLogDrop_FullMethodName      = "/logger.SystemLoginLogService/SystemLoginLogDrop"
	SystemLoginLogService_SystemLoginLog_FullMethodName          = "/logger.SystemLoginLogService/SystemLoginLog"
	SystemLoginLogService_SystemLoginLogList_FullMethodName      = "/logger.SystemLoginLogService/SystemLoginLogList"
	SystemLoginLogService_SystemLoginLogListTotal_FullMethodName = "/logger.SystemLoginLogService/SystemLoginLogListTotal"
)

// SystemLoginLogServiceClient is the client API for SystemLoginLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemLoginLogService 服务
type SystemLoginLogServiceClient interface {
	SystemLoginLogCreate(ctx context.Context, in *SystemLoginLogCreateRequest, opts ...grpc.CallOption) (*SystemLoginLogCreateResponse, error)
	SystemLoginLogDelete(ctx context.Context, in *SystemLoginLogDeleteRequest, opts ...grpc.CallOption) (*SystemLoginLogDeleteResponse, error)
	SystemLoginLogDrop(ctx context.Context, in *SystemLoginLogDropRequest, opts ...grpc.CallOption) (*SystemLoginLogDropResponse, error)
	SystemLoginLog(ctx context.Context, in *SystemLoginLogRequest, opts ...grpc.CallOption) (*SystemLoginLogResponse, error)
	SystemLoginLogList(ctx context.Context, in *SystemLoginLogListRequest, opts ...grpc.CallOption) (*SystemLoginLogListResponse, error)
	SystemLoginLogListTotal(ctx context.Context, in *SystemLoginLogListTotalRequest, opts ...grpc.CallOption) (*SystemLoginLogTotalResponse, error)
}

type systemLoginLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemLoginLogServiceClient(cc grpc.ClientConnInterface) SystemLoginLogServiceClient {
	return &systemLoginLogServiceClient{cc}
}

func (c *systemLoginLogServiceClient) SystemLoginLogCreate(ctx context.Context, in *SystemLoginLogCreateRequest, opts ...grpc.CallOption) (*SystemLoginLogCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemLoginLogCreateResponse)
	err := c.cc.Invoke(ctx, SystemLoginLogService_SystemLoginLogCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemLoginLogServiceClient) SystemLoginLogDelete(ctx context.Context, in *SystemLoginLogDeleteRequest, opts ...grpc.CallOption) (*SystemLoginLogDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemLoginLogDeleteResponse)
	err := c.cc.Invoke(ctx, SystemLoginLogService_SystemLoginLogDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemLoginLogServiceClient) SystemLoginLogDrop(ctx context.Context, in *SystemLoginLogDropRequest, opts ...grpc.CallOption) (*SystemLoginLogDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemLoginLogDropResponse)
	err := c.cc.Invoke(ctx, SystemLoginLogService_SystemLoginLogDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemLoginLogServiceClient) SystemLoginLog(ctx context.Context, in *SystemLoginLogRequest, opts ...grpc.CallOption) (*SystemLoginLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemLoginLogResponse)
	err := c.cc.Invoke(ctx, SystemLoginLogService_SystemLoginLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemLoginLogServiceClient) SystemLoginLogList(ctx context.Context, in *SystemLoginLogListRequest, opts ...grpc.CallOption) (*SystemLoginLogListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemLoginLogListResponse)
	err := c.cc.Invoke(ctx, SystemLoginLogService_SystemLoginLogList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemLoginLogServiceClient) SystemLoginLogListTotal(ctx context.Context, in *SystemLoginLogListTotalRequest, opts ...grpc.CallOption) (*SystemLoginLogTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemLoginLogTotalResponse)
	err := c.cc.Invoke(ctx, SystemLoginLogService_SystemLoginLogListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemLoginLogServiceServer is the server API for SystemLoginLogService service.
// All implementations must embed UnimplementedSystemLoginLogServiceServer
// for forward compatibility
//
// SystemLoginLogService 服务
type SystemLoginLogServiceServer interface {
	SystemLoginLogCreate(context.Context, *SystemLoginLogCreateRequest) (*SystemLoginLogCreateResponse, error)
	SystemLoginLogDelete(context.Context, *SystemLoginLogDeleteRequest) (*SystemLoginLogDeleteResponse, error)
	SystemLoginLogDrop(context.Context, *SystemLoginLogDropRequest) (*SystemLoginLogDropResponse, error)
	SystemLoginLog(context.Context, *SystemLoginLogRequest) (*SystemLoginLogResponse, error)
	SystemLoginLogList(context.Context, *SystemLoginLogListRequest) (*SystemLoginLogListResponse, error)
	SystemLoginLogListTotal(context.Context, *SystemLoginLogListTotalRequest) (*SystemLoginLogTotalResponse, error)
	mustEmbedUnimplementedSystemLoginLogServiceServer()
}

// UnimplementedSystemLoginLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemLoginLogServiceServer struct {
}

func (UnimplementedSystemLoginLogServiceServer) SystemLoginLogCreate(context.Context, *SystemLoginLogCreateRequest) (*SystemLoginLogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemLoginLogCreate not implemented")
}
func (UnimplementedSystemLoginLogServiceServer) SystemLoginLogDelete(context.Context, *SystemLoginLogDeleteRequest) (*SystemLoginLogDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemLoginLogDelete not implemented")
}
func (UnimplementedSystemLoginLogServiceServer) SystemLoginLogDrop(context.Context, *SystemLoginLogDropRequest) (*SystemLoginLogDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemLoginLogDrop not implemented")
}
func (UnimplementedSystemLoginLogServiceServer) SystemLoginLog(context.Context, *SystemLoginLogRequest) (*SystemLoginLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemLoginLog not implemented")
}
func (UnimplementedSystemLoginLogServiceServer) SystemLoginLogList(context.Context, *SystemLoginLogListRequest) (*SystemLoginLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemLoginLogList not implemented")
}
func (UnimplementedSystemLoginLogServiceServer) SystemLoginLogListTotal(context.Context, *SystemLoginLogListTotalRequest) (*SystemLoginLogTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemLoginLogListTotal not implemented")
}
func (UnimplementedSystemLoginLogServiceServer) mustEmbedUnimplementedSystemLoginLogServiceServer() {}

// UnsafeSystemLoginLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemLoginLogServiceServer will
// result in compilation errors.
type UnsafeSystemLoginLogServiceServer interface {
	mustEmbedUnimplementedSystemLoginLogServiceServer()
}

func RegisterSystemLoginLogServiceServer(s grpc.ServiceRegistrar, srv SystemLoginLogServiceServer) {
	s.RegisterService(&SystemLoginLogService_ServiceDesc, srv)
}

func _SystemLoginLogService_SystemLoginLogCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLoginLogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemLoginLogService_SystemLoginLogCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogCreate(ctx, req.(*SystemLoginLogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemLoginLogService_SystemLoginLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLoginLogDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemLoginLogService_SystemLoginLogDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogDelete(ctx, req.(*SystemLoginLogDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemLoginLogService_SystemLoginLogDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLoginLogDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemLoginLogService_SystemLoginLogDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogDrop(ctx, req.(*SystemLoginLogDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemLoginLogService_SystemLoginLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLoginLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemLoginLogServiceServer).SystemLoginLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemLoginLogService_SystemLoginLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemLoginLogServiceServer).SystemLoginLog(ctx, req.(*SystemLoginLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemLoginLogService_SystemLoginLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLoginLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemLoginLogService_SystemLoginLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogList(ctx, req.(*SystemLoginLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemLoginLogService_SystemLoginLogListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemLoginLogListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemLoginLogService_SystemLoginLogListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemLoginLogServiceServer).SystemLoginLogListTotal(ctx, req.(*SystemLoginLogListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemLoginLogService_ServiceDesc is the grpc.ServiceDesc for SystemLoginLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemLoginLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.SystemLoginLogService",
	HandlerType: (*SystemLoginLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemLoginLogCreate",
			Handler:    _SystemLoginLogService_SystemLoginLogCreate_Handler,
		},
		{
			MethodName: "SystemLoginLogDelete",
			Handler:    _SystemLoginLogService_SystemLoginLogDelete_Handler,
		},
		{
			MethodName: "SystemLoginLogDrop",
			Handler:    _SystemLoginLogService_SystemLoginLogDrop_Handler,
		},
		{
			MethodName: "SystemLoginLog",
			Handler:    _SystemLoginLogService_SystemLoginLog_Handler,
		},
		{
			MethodName: "SystemLoginLogList",
			Handler:    _SystemLoginLogService_SystemLoginLogList_Handler,
		},
		{
			MethodName: "SystemLoginLogListTotal",
			Handler:    _SystemLoginLogService_SystemLoginLogListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logger/system_login_log.proto",
}
