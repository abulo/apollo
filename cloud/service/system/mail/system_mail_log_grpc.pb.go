// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: mail/system_mail_log.proto

// system_mail_log 邮件日志表

package mail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SystemMailLogService_SystemMailLogCreate_FullMethodName    = "/mail.SystemMailLogService/SystemMailLogCreate"
	SystemMailLogService_SystemMailLogUpdate_FullMethodName    = "/mail.SystemMailLogService/SystemMailLogUpdate"
	SystemMailLogService_SystemMailLogDelete_FullMethodName    = "/mail.SystemMailLogService/SystemMailLogDelete"
	SystemMailLogService_SystemMailLog_FullMethodName          = "/mail.SystemMailLogService/SystemMailLog"
	SystemMailLogService_SystemMailLogRecover_FullMethodName   = "/mail.SystemMailLogService/SystemMailLogRecover"
	SystemMailLogService_SystemMailLogList_FullMethodName      = "/mail.SystemMailLogService/SystemMailLogList"
	SystemMailLogService_SystemMailLogListTotal_FullMethodName = "/mail.SystemMailLogService/SystemMailLogListTotal"
)

// SystemMailLogServiceClient is the client API for SystemMailLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemMailLogServiceClient interface {
	SystemMailLogCreate(ctx context.Context, in *SystemMailLogCreateRequest, opts ...grpc.CallOption) (*SystemMailLogCreateResponse, error)
	SystemMailLogUpdate(ctx context.Context, in *SystemMailLogUpdateRequest, opts ...grpc.CallOption) (*SystemMailLogUpdateResponse, error)
	SystemMailLogDelete(ctx context.Context, in *SystemMailLogDeleteRequest, opts ...grpc.CallOption) (*SystemMailLogDeleteResponse, error)
	SystemMailLog(ctx context.Context, in *SystemMailLogRequest, opts ...grpc.CallOption) (*SystemMailLogResponse, error)
	SystemMailLogRecover(ctx context.Context, in *SystemMailLogRecoverRequest, opts ...grpc.CallOption) (*SystemMailLogRecoverResponse, error)
	SystemMailLogList(ctx context.Context, in *SystemMailLogListRequest, opts ...grpc.CallOption) (*SystemMailLogListResponse, error)
	SystemMailLogListTotal(ctx context.Context, in *SystemMailLogListTotalRequest, opts ...grpc.CallOption) (*SystemMailLogTotalResponse, error)
}

type systemMailLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemMailLogServiceClient(cc grpc.ClientConnInterface) SystemMailLogServiceClient {
	return &systemMailLogServiceClient{cc}
}

func (c *systemMailLogServiceClient) SystemMailLogCreate(ctx context.Context, in *SystemMailLogCreateRequest, opts ...grpc.CallOption) (*SystemMailLogCreateResponse, error) {
	out := new(SystemMailLogCreateResponse)
	err := c.cc.Invoke(ctx, SystemMailLogService_SystemMailLogCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMailLogServiceClient) SystemMailLogUpdate(ctx context.Context, in *SystemMailLogUpdateRequest, opts ...grpc.CallOption) (*SystemMailLogUpdateResponse, error) {
	out := new(SystemMailLogUpdateResponse)
	err := c.cc.Invoke(ctx, SystemMailLogService_SystemMailLogUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMailLogServiceClient) SystemMailLogDelete(ctx context.Context, in *SystemMailLogDeleteRequest, opts ...grpc.CallOption) (*SystemMailLogDeleteResponse, error) {
	out := new(SystemMailLogDeleteResponse)
	err := c.cc.Invoke(ctx, SystemMailLogService_SystemMailLogDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMailLogServiceClient) SystemMailLog(ctx context.Context, in *SystemMailLogRequest, opts ...grpc.CallOption) (*SystemMailLogResponse, error) {
	out := new(SystemMailLogResponse)
	err := c.cc.Invoke(ctx, SystemMailLogService_SystemMailLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMailLogServiceClient) SystemMailLogRecover(ctx context.Context, in *SystemMailLogRecoverRequest, opts ...grpc.CallOption) (*SystemMailLogRecoverResponse, error) {
	out := new(SystemMailLogRecoverResponse)
	err := c.cc.Invoke(ctx, SystemMailLogService_SystemMailLogRecover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMailLogServiceClient) SystemMailLogList(ctx context.Context, in *SystemMailLogListRequest, opts ...grpc.CallOption) (*SystemMailLogListResponse, error) {
	out := new(SystemMailLogListResponse)
	err := c.cc.Invoke(ctx, SystemMailLogService_SystemMailLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemMailLogServiceClient) SystemMailLogListTotal(ctx context.Context, in *SystemMailLogListTotalRequest, opts ...grpc.CallOption) (*SystemMailLogTotalResponse, error) {
	out := new(SystemMailLogTotalResponse)
	err := c.cc.Invoke(ctx, SystemMailLogService_SystemMailLogListTotal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemMailLogServiceServer is the server API for SystemMailLogService service.
// All implementations must embed UnimplementedSystemMailLogServiceServer
// for forward compatibility
type SystemMailLogServiceServer interface {
	SystemMailLogCreate(context.Context, *SystemMailLogCreateRequest) (*SystemMailLogCreateResponse, error)
	SystemMailLogUpdate(context.Context, *SystemMailLogUpdateRequest) (*SystemMailLogUpdateResponse, error)
	SystemMailLogDelete(context.Context, *SystemMailLogDeleteRequest) (*SystemMailLogDeleteResponse, error)
	SystemMailLog(context.Context, *SystemMailLogRequest) (*SystemMailLogResponse, error)
	SystemMailLogRecover(context.Context, *SystemMailLogRecoverRequest) (*SystemMailLogRecoverResponse, error)
	SystemMailLogList(context.Context, *SystemMailLogListRequest) (*SystemMailLogListResponse, error)
	SystemMailLogListTotal(context.Context, *SystemMailLogListTotalRequest) (*SystemMailLogTotalResponse, error)
	mustEmbedUnimplementedSystemMailLogServiceServer()
}

// UnimplementedSystemMailLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemMailLogServiceServer struct {
}

func (UnimplementedSystemMailLogServiceServer) SystemMailLogCreate(context.Context, *SystemMailLogCreateRequest) (*SystemMailLogCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMailLogCreate not implemented")
}
func (UnimplementedSystemMailLogServiceServer) SystemMailLogUpdate(context.Context, *SystemMailLogUpdateRequest) (*SystemMailLogUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMailLogUpdate not implemented")
}
func (UnimplementedSystemMailLogServiceServer) SystemMailLogDelete(context.Context, *SystemMailLogDeleteRequest) (*SystemMailLogDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMailLogDelete not implemented")
}
func (UnimplementedSystemMailLogServiceServer) SystemMailLog(context.Context, *SystemMailLogRequest) (*SystemMailLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMailLog not implemented")
}
func (UnimplementedSystemMailLogServiceServer) SystemMailLogRecover(context.Context, *SystemMailLogRecoverRequest) (*SystemMailLogRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMailLogRecover not implemented")
}
func (UnimplementedSystemMailLogServiceServer) SystemMailLogList(context.Context, *SystemMailLogListRequest) (*SystemMailLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMailLogList not implemented")
}
func (UnimplementedSystemMailLogServiceServer) SystemMailLogListTotal(context.Context, *SystemMailLogListTotalRequest) (*SystemMailLogTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemMailLogListTotal not implemented")
}
func (UnimplementedSystemMailLogServiceServer) mustEmbedUnimplementedSystemMailLogServiceServer() {}

// UnsafeSystemMailLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemMailLogServiceServer will
// result in compilation errors.
type UnsafeSystemMailLogServiceServer interface {
	mustEmbedUnimplementedSystemMailLogServiceServer()
}

func RegisterSystemMailLogServiceServer(s grpc.ServiceRegistrar, srv SystemMailLogServiceServer) {
	s.RegisterService(&SystemMailLogService_ServiceDesc, srv)
}

func _SystemMailLogService_SystemMailLogCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMailLogCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMailLogServiceServer).SystemMailLogCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMailLogService_SystemMailLogCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMailLogServiceServer).SystemMailLogCreate(ctx, req.(*SystemMailLogCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMailLogService_SystemMailLogUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMailLogUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMailLogServiceServer).SystemMailLogUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMailLogService_SystemMailLogUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMailLogServiceServer).SystemMailLogUpdate(ctx, req.(*SystemMailLogUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMailLogService_SystemMailLogDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMailLogDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMailLogServiceServer).SystemMailLogDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMailLogService_SystemMailLogDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMailLogServiceServer).SystemMailLogDelete(ctx, req.(*SystemMailLogDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMailLogService_SystemMailLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMailLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMailLogServiceServer).SystemMailLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMailLogService_SystemMailLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMailLogServiceServer).SystemMailLog(ctx, req.(*SystemMailLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMailLogService_SystemMailLogRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMailLogRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMailLogServiceServer).SystemMailLogRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMailLogService_SystemMailLogRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMailLogServiceServer).SystemMailLogRecover(ctx, req.(*SystemMailLogRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMailLogService_SystemMailLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMailLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMailLogServiceServer).SystemMailLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMailLogService_SystemMailLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMailLogServiceServer).SystemMailLogList(ctx, req.(*SystemMailLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemMailLogService_SystemMailLogListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemMailLogListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemMailLogServiceServer).SystemMailLogListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemMailLogService_SystemMailLogListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemMailLogServiceServer).SystemMailLogListTotal(ctx, req.(*SystemMailLogListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemMailLogService_ServiceDesc is the grpc.ServiceDesc for SystemMailLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemMailLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mail.SystemMailLogService",
	HandlerType: (*SystemMailLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemMailLogCreate",
			Handler:    _SystemMailLogService_SystemMailLogCreate_Handler,
		},
		{
			MethodName: "SystemMailLogUpdate",
			Handler:    _SystemMailLogService_SystemMailLogUpdate_Handler,
		},
		{
			MethodName: "SystemMailLogDelete",
			Handler:    _SystemMailLogService_SystemMailLogDelete_Handler,
		},
		{
			MethodName: "SystemMailLog",
			Handler:    _SystemMailLogService_SystemMailLog_Handler,
		},
		{
			MethodName: "SystemMailLogRecover",
			Handler:    _SystemMailLogService_SystemMailLogRecover_Handler,
		},
		{
			MethodName: "SystemMailLogList",
			Handler:    _SystemMailLogService_SystemMailLogList_Handler,
		},
		{
			MethodName: "SystemMailLogListTotal",
			Handler:    _SystemMailLogService_SystemMailLogListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail/system_mail_log.proto",
}
