// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: notice/system_notice.proto

// system_notice 通知公告表

package notice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SystemNoticeService_SystemNoticeCreate_FullMethodName    = "/notice.SystemNoticeService/SystemNoticeCreate"
	SystemNoticeService_SystemNoticeUpdate_FullMethodName    = "/notice.SystemNoticeService/SystemNoticeUpdate"
	SystemNoticeService_SystemNoticeDelete_FullMethodName    = "/notice.SystemNoticeService/SystemNoticeDelete"
	SystemNoticeService_SystemNotice_FullMethodName          = "/notice.SystemNoticeService/SystemNotice"
	SystemNoticeService_SystemNoticeRecover_FullMethodName   = "/notice.SystemNoticeService/SystemNoticeRecover"
	SystemNoticeService_SystemNoticeList_FullMethodName      = "/notice.SystemNoticeService/SystemNoticeList"
	SystemNoticeService_SystemNoticeListTotal_FullMethodName = "/notice.SystemNoticeService/SystemNoticeListTotal"
)

// SystemNoticeServiceClient is the client API for SystemNoticeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemNoticeService 服务
type SystemNoticeServiceClient interface {
	SystemNoticeCreate(ctx context.Context, in *SystemNoticeCreateRequest, opts ...grpc.CallOption) (*SystemNoticeCreateResponse, error)
	SystemNoticeUpdate(ctx context.Context, in *SystemNoticeUpdateRequest, opts ...grpc.CallOption) (*SystemNoticeUpdateResponse, error)
	SystemNoticeDelete(ctx context.Context, in *SystemNoticeDeleteRequest, opts ...grpc.CallOption) (*SystemNoticeDeleteResponse, error)
	SystemNotice(ctx context.Context, in *SystemNoticeRequest, opts ...grpc.CallOption) (*SystemNoticeResponse, error)
	SystemNoticeRecover(ctx context.Context, in *SystemNoticeRecoverRequest, opts ...grpc.CallOption) (*SystemNoticeRecoverResponse, error)
	SystemNoticeList(ctx context.Context, in *SystemNoticeListRequest, opts ...grpc.CallOption) (*SystemNoticeListResponse, error)
	SystemNoticeListTotal(ctx context.Context, in *SystemNoticeListTotalRequest, opts ...grpc.CallOption) (*SystemNoticeTotalResponse, error)
}

type systemNoticeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemNoticeServiceClient(cc grpc.ClientConnInterface) SystemNoticeServiceClient {
	return &systemNoticeServiceClient{cc}
}

func (c *systemNoticeServiceClient) SystemNoticeCreate(ctx context.Context, in *SystemNoticeCreateRequest, opts ...grpc.CallOption) (*SystemNoticeCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNoticeCreateResponse)
	err := c.cc.Invoke(ctx, SystemNoticeService_SystemNoticeCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemNoticeServiceClient) SystemNoticeUpdate(ctx context.Context, in *SystemNoticeUpdateRequest, opts ...grpc.CallOption) (*SystemNoticeUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNoticeUpdateResponse)
	err := c.cc.Invoke(ctx, SystemNoticeService_SystemNoticeUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemNoticeServiceClient) SystemNoticeDelete(ctx context.Context, in *SystemNoticeDeleteRequest, opts ...grpc.CallOption) (*SystemNoticeDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNoticeDeleteResponse)
	err := c.cc.Invoke(ctx, SystemNoticeService_SystemNoticeDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemNoticeServiceClient) SystemNotice(ctx context.Context, in *SystemNoticeRequest, opts ...grpc.CallOption) (*SystemNoticeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNoticeResponse)
	err := c.cc.Invoke(ctx, SystemNoticeService_SystemNotice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemNoticeServiceClient) SystemNoticeRecover(ctx context.Context, in *SystemNoticeRecoverRequest, opts ...grpc.CallOption) (*SystemNoticeRecoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNoticeRecoverResponse)
	err := c.cc.Invoke(ctx, SystemNoticeService_SystemNoticeRecover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemNoticeServiceClient) SystemNoticeList(ctx context.Context, in *SystemNoticeListRequest, opts ...grpc.CallOption) (*SystemNoticeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNoticeListResponse)
	err := c.cc.Invoke(ctx, SystemNoticeService_SystemNoticeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemNoticeServiceClient) SystemNoticeListTotal(ctx context.Context, in *SystemNoticeListTotalRequest, opts ...grpc.CallOption) (*SystemNoticeTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNoticeTotalResponse)
	err := c.cc.Invoke(ctx, SystemNoticeService_SystemNoticeListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemNoticeServiceServer is the server API for SystemNoticeService service.
// All implementations must embed UnimplementedSystemNoticeServiceServer
// for forward compatibility
//
// SystemNoticeService 服务
type SystemNoticeServiceServer interface {
	SystemNoticeCreate(context.Context, *SystemNoticeCreateRequest) (*SystemNoticeCreateResponse, error)
	SystemNoticeUpdate(context.Context, *SystemNoticeUpdateRequest) (*SystemNoticeUpdateResponse, error)
	SystemNoticeDelete(context.Context, *SystemNoticeDeleteRequest) (*SystemNoticeDeleteResponse, error)
	SystemNotice(context.Context, *SystemNoticeRequest) (*SystemNoticeResponse, error)
	SystemNoticeRecover(context.Context, *SystemNoticeRecoverRequest) (*SystemNoticeRecoverResponse, error)
	SystemNoticeList(context.Context, *SystemNoticeListRequest) (*SystemNoticeListResponse, error)
	SystemNoticeListTotal(context.Context, *SystemNoticeListTotalRequest) (*SystemNoticeTotalResponse, error)
	mustEmbedUnimplementedSystemNoticeServiceServer()
}

// UnimplementedSystemNoticeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemNoticeServiceServer struct {
}

func (UnimplementedSystemNoticeServiceServer) SystemNoticeCreate(context.Context, *SystemNoticeCreateRequest) (*SystemNoticeCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNoticeCreate not implemented")
}
func (UnimplementedSystemNoticeServiceServer) SystemNoticeUpdate(context.Context, *SystemNoticeUpdateRequest) (*SystemNoticeUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNoticeUpdate not implemented")
}
func (UnimplementedSystemNoticeServiceServer) SystemNoticeDelete(context.Context, *SystemNoticeDeleteRequest) (*SystemNoticeDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNoticeDelete not implemented")
}
func (UnimplementedSystemNoticeServiceServer) SystemNotice(context.Context, *SystemNoticeRequest) (*SystemNoticeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNotice not implemented")
}
func (UnimplementedSystemNoticeServiceServer) SystemNoticeRecover(context.Context, *SystemNoticeRecoverRequest) (*SystemNoticeRecoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNoticeRecover not implemented")
}
func (UnimplementedSystemNoticeServiceServer) SystemNoticeList(context.Context, *SystemNoticeListRequest) (*SystemNoticeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNoticeList not implemented")
}
func (UnimplementedSystemNoticeServiceServer) SystemNoticeListTotal(context.Context, *SystemNoticeListTotalRequest) (*SystemNoticeTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNoticeListTotal not implemented")
}
func (UnimplementedSystemNoticeServiceServer) mustEmbedUnimplementedSystemNoticeServiceServer() {}

// UnsafeSystemNoticeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemNoticeServiceServer will
// result in compilation errors.
type UnsafeSystemNoticeServiceServer interface {
	mustEmbedUnimplementedSystemNoticeServiceServer()
}

func RegisterSystemNoticeServiceServer(s grpc.ServiceRegistrar, srv SystemNoticeServiceServer) {
	s.RegisterService(&SystemNoticeService_ServiceDesc, srv)
}

func _SystemNoticeService_SystemNoticeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNoticeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNoticeServiceServer).SystemNoticeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemNoticeService_SystemNoticeCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNoticeServiceServer).SystemNoticeCreate(ctx, req.(*SystemNoticeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemNoticeService_SystemNoticeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNoticeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNoticeServiceServer).SystemNoticeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemNoticeService_SystemNoticeUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNoticeServiceServer).SystemNoticeUpdate(ctx, req.(*SystemNoticeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemNoticeService_SystemNoticeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNoticeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNoticeServiceServer).SystemNoticeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemNoticeService_SystemNoticeDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNoticeServiceServer).SystemNoticeDelete(ctx, req.(*SystemNoticeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemNoticeService_SystemNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNoticeServiceServer).SystemNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemNoticeService_SystemNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNoticeServiceServer).SystemNotice(ctx, req.(*SystemNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemNoticeService_SystemNoticeRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNoticeRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNoticeServiceServer).SystemNoticeRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemNoticeService_SystemNoticeRecover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNoticeServiceServer).SystemNoticeRecover(ctx, req.(*SystemNoticeRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemNoticeService_SystemNoticeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNoticeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNoticeServiceServer).SystemNoticeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemNoticeService_SystemNoticeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNoticeServiceServer).SystemNoticeList(ctx, req.(*SystemNoticeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemNoticeService_SystemNoticeListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNoticeListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNoticeServiceServer).SystemNoticeListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemNoticeService_SystemNoticeListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNoticeServiceServer).SystemNoticeListTotal(ctx, req.(*SystemNoticeListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemNoticeService_ServiceDesc is the grpc.ServiceDesc for SystemNoticeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemNoticeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notice.SystemNoticeService",
	HandlerType: (*SystemNoticeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemNoticeCreate",
			Handler:    _SystemNoticeService_SystemNoticeCreate_Handler,
		},
		{
			MethodName: "SystemNoticeUpdate",
			Handler:    _SystemNoticeService_SystemNoticeUpdate_Handler,
		},
		{
			MethodName: "SystemNoticeDelete",
			Handler:    _SystemNoticeService_SystemNoticeDelete_Handler,
		},
		{
			MethodName: "SystemNotice",
			Handler:    _SystemNoticeService_SystemNotice_Handler,
		},
		{
			MethodName: "SystemNoticeRecover",
			Handler:    _SystemNoticeService_SystemNoticeRecover_Handler,
		},
		{
			MethodName: "SystemNoticeList",
			Handler:    _SystemNoticeService_SystemNoticeList_Handler,
		},
		{
			MethodName: "SystemNoticeListTotal",
			Handler:    _SystemNoticeService_SystemNoticeListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notice/system_notice.proto",
}
