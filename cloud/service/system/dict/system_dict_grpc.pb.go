// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: system_dict.proto

// system_dict 字典数据表

package dict

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SystemDictService_SystemDictCreate_FullMethodName    = "/dict.SystemDictService/SystemDictCreate"
	SystemDictService_SystemDictUpdate_FullMethodName    = "/dict.SystemDictService/SystemDictUpdate"
	SystemDictService_SystemDictDelete_FullMethodName    = "/dict.SystemDictService/SystemDictDelete"
	SystemDictService_SystemDict_FullMethodName          = "/dict.SystemDictService/SystemDict"
	SystemDictService_SystemDictList_FullMethodName      = "/dict.SystemDictService/SystemDictList"
	SystemDictService_SystemDictListTotal_FullMethodName = "/dict.SystemDictService/SystemDictListTotal"
)

// SystemDictServiceClient is the client API for SystemDictService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemDictService 服务
type SystemDictServiceClient interface {
	SystemDictCreate(ctx context.Context, in *SystemDictCreateRequest, opts ...grpc.CallOption) (*SystemDictCreateResponse, error)
	SystemDictUpdate(ctx context.Context, in *SystemDictUpdateRequest, opts ...grpc.CallOption) (*SystemDictUpdateResponse, error)
	SystemDictDelete(ctx context.Context, in *SystemDictDeleteRequest, opts ...grpc.CallOption) (*SystemDictDeleteResponse, error)
	SystemDict(ctx context.Context, in *SystemDictRequest, opts ...grpc.CallOption) (*SystemDictResponse, error)
	SystemDictList(ctx context.Context, in *SystemDictListRequest, opts ...grpc.CallOption) (*SystemDictListResponse, error)
	SystemDictListTotal(ctx context.Context, in *SystemDictListTotalRequest, opts ...grpc.CallOption) (*SystemDictTotalResponse, error)
}

type systemDictServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemDictServiceClient(cc grpc.ClientConnInterface) SystemDictServiceClient {
	return &systemDictServiceClient{cc}
}

func (c *systemDictServiceClient) SystemDictCreate(ctx context.Context, in *SystemDictCreateRequest, opts ...grpc.CallOption) (*SystemDictCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemDictCreateResponse)
	err := c.cc.Invoke(ctx, SystemDictService_SystemDictCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemDictServiceClient) SystemDictUpdate(ctx context.Context, in *SystemDictUpdateRequest, opts ...grpc.CallOption) (*SystemDictUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemDictUpdateResponse)
	err := c.cc.Invoke(ctx, SystemDictService_SystemDictUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemDictServiceClient) SystemDictDelete(ctx context.Context, in *SystemDictDeleteRequest, opts ...grpc.CallOption) (*SystemDictDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemDictDeleteResponse)
	err := c.cc.Invoke(ctx, SystemDictService_SystemDictDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemDictServiceClient) SystemDict(ctx context.Context, in *SystemDictRequest, opts ...grpc.CallOption) (*SystemDictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemDictResponse)
	err := c.cc.Invoke(ctx, SystemDictService_SystemDict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemDictServiceClient) SystemDictList(ctx context.Context, in *SystemDictListRequest, opts ...grpc.CallOption) (*SystemDictListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemDictListResponse)
	err := c.cc.Invoke(ctx, SystemDictService_SystemDictList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemDictServiceClient) SystemDictListTotal(ctx context.Context, in *SystemDictListTotalRequest, opts ...grpc.CallOption) (*SystemDictTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemDictTotalResponse)
	err := c.cc.Invoke(ctx, SystemDictService_SystemDictListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemDictServiceServer is the server API for SystemDictService service.
// All implementations must embed UnimplementedSystemDictServiceServer
// for forward compatibility
//
// SystemDictService 服务
type SystemDictServiceServer interface {
	SystemDictCreate(context.Context, *SystemDictCreateRequest) (*SystemDictCreateResponse, error)
	SystemDictUpdate(context.Context, *SystemDictUpdateRequest) (*SystemDictUpdateResponse, error)
	SystemDictDelete(context.Context, *SystemDictDeleteRequest) (*SystemDictDeleteResponse, error)
	SystemDict(context.Context, *SystemDictRequest) (*SystemDictResponse, error)
	SystemDictList(context.Context, *SystemDictListRequest) (*SystemDictListResponse, error)
	SystemDictListTotal(context.Context, *SystemDictListTotalRequest) (*SystemDictTotalResponse, error)
	mustEmbedUnimplementedSystemDictServiceServer()
}

// UnimplementedSystemDictServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemDictServiceServer struct {
}

func (UnimplementedSystemDictServiceServer) SystemDictCreate(context.Context, *SystemDictCreateRequest) (*SystemDictCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDictCreate not implemented")
}
func (UnimplementedSystemDictServiceServer) SystemDictUpdate(context.Context, *SystemDictUpdateRequest) (*SystemDictUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDictUpdate not implemented")
}
func (UnimplementedSystemDictServiceServer) SystemDictDelete(context.Context, *SystemDictDeleteRequest) (*SystemDictDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDictDelete not implemented")
}
func (UnimplementedSystemDictServiceServer) SystemDict(context.Context, *SystemDictRequest) (*SystemDictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDict not implemented")
}
func (UnimplementedSystemDictServiceServer) SystemDictList(context.Context, *SystemDictListRequest) (*SystemDictListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDictList not implemented")
}
func (UnimplementedSystemDictServiceServer) SystemDictListTotal(context.Context, *SystemDictListTotalRequest) (*SystemDictTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemDictListTotal not implemented")
}
func (UnimplementedSystemDictServiceServer) mustEmbedUnimplementedSystemDictServiceServer() {}

// UnsafeSystemDictServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemDictServiceServer will
// result in compilation errors.
type UnsafeSystemDictServiceServer interface {
	mustEmbedUnimplementedSystemDictServiceServer()
}

func RegisterSystemDictServiceServer(s grpc.ServiceRegistrar, srv SystemDictServiceServer) {
	s.RegisterService(&SystemDictService_ServiceDesc, srv)
}

func _SystemDictService_SystemDictCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemDictCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemDictServiceServer).SystemDictCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemDictService_SystemDictCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemDictServiceServer).SystemDictCreate(ctx, req.(*SystemDictCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemDictService_SystemDictUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemDictUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemDictServiceServer).SystemDictUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemDictService_SystemDictUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemDictServiceServer).SystemDictUpdate(ctx, req.(*SystemDictUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemDictService_SystemDictDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemDictDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemDictServiceServer).SystemDictDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemDictService_SystemDictDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemDictServiceServer).SystemDictDelete(ctx, req.(*SystemDictDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemDictService_SystemDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemDictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemDictServiceServer).SystemDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemDictService_SystemDict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemDictServiceServer).SystemDict(ctx, req.(*SystemDictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemDictService_SystemDictList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemDictListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemDictServiceServer).SystemDictList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemDictService_SystemDictList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemDictServiceServer).SystemDictList(ctx, req.(*SystemDictListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemDictService_SystemDictListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemDictListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemDictServiceServer).SystemDictListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemDictService_SystemDictListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemDictServiceServer).SystemDictListTotal(ctx, req.(*SystemDictListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemDictService_ServiceDesc is the grpc.ServiceDesc for SystemDictService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemDictService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dict.SystemDictService",
	HandlerType: (*SystemDictServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemDictCreate",
			Handler:    _SystemDictService_SystemDictCreate_Handler,
		},
		{
			MethodName: "SystemDictUpdate",
			Handler:    _SystemDictService_SystemDictUpdate_Handler,
		},
		{
			MethodName: "SystemDictDelete",
			Handler:    _SystemDictService_SystemDictDelete_Handler,
		},
		{
			MethodName: "SystemDict",
			Handler:    _SystemDictService_SystemDict_Handler,
		},
		{
			MethodName: "SystemDictList",
			Handler:    _SystemDictService_SystemDictList_Handler,
		},
		{
			MethodName: "SystemDictListTotal",
			Handler:    _SystemDictService_SystemDictListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system_dict.proto",
}
