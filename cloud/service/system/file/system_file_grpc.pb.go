// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: system_file.proto

// system_file 文件管理

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SystemFileService_SystemFileCreate_FullMethodName    = "/file.SystemFileService/SystemFileCreate"
	SystemFileService_SystemFileUpdate_FullMethodName    = "/file.SystemFileService/SystemFileUpdate"
	SystemFileService_SystemFileDelete_FullMethodName    = "/file.SystemFileService/SystemFileDelete"
	SystemFileService_SystemFile_FullMethodName          = "/file.SystemFileService/SystemFile"
	SystemFileService_SystemFileList_FullMethodName      = "/file.SystemFileService/SystemFileList"
	SystemFileService_SystemFileListTotal_FullMethodName = "/file.SystemFileService/SystemFileListTotal"
)

// SystemFileServiceClient is the client API for SystemFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SystemFileService 服务
type SystemFileServiceClient interface {
	SystemFileCreate(ctx context.Context, in *SystemFileCreateRequest, opts ...grpc.CallOption) (*SystemFileCreateResponse, error)
	SystemFileUpdate(ctx context.Context, in *SystemFileUpdateRequest, opts ...grpc.CallOption) (*SystemFileUpdateResponse, error)
	SystemFileDelete(ctx context.Context, in *SystemFileDeleteRequest, opts ...grpc.CallOption) (*SystemFileDeleteResponse, error)
	SystemFile(ctx context.Context, in *SystemFileRequest, opts ...grpc.CallOption) (*SystemFileResponse, error)
	SystemFileList(ctx context.Context, in *SystemFileListRequest, opts ...grpc.CallOption) (*SystemFileListResponse, error)
	SystemFileListTotal(ctx context.Context, in *SystemFileListTotalRequest, opts ...grpc.CallOption) (*SystemFileTotalResponse, error)
}

type systemFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemFileServiceClient(cc grpc.ClientConnInterface) SystemFileServiceClient {
	return &systemFileServiceClient{cc}
}

func (c *systemFileServiceClient) SystemFileCreate(ctx context.Context, in *SystemFileCreateRequest, opts ...grpc.CallOption) (*SystemFileCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemFileCreateResponse)
	err := c.cc.Invoke(ctx, SystemFileService_SystemFileCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemFileServiceClient) SystemFileUpdate(ctx context.Context, in *SystemFileUpdateRequest, opts ...grpc.CallOption) (*SystemFileUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemFileUpdateResponse)
	err := c.cc.Invoke(ctx, SystemFileService_SystemFileUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemFileServiceClient) SystemFileDelete(ctx context.Context, in *SystemFileDeleteRequest, opts ...grpc.CallOption) (*SystemFileDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemFileDeleteResponse)
	err := c.cc.Invoke(ctx, SystemFileService_SystemFileDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemFileServiceClient) SystemFile(ctx context.Context, in *SystemFileRequest, opts ...grpc.CallOption) (*SystemFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemFileResponse)
	err := c.cc.Invoke(ctx, SystemFileService_SystemFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemFileServiceClient) SystemFileList(ctx context.Context, in *SystemFileListRequest, opts ...grpc.CallOption) (*SystemFileListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemFileListResponse)
	err := c.cc.Invoke(ctx, SystemFileService_SystemFileList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemFileServiceClient) SystemFileListTotal(ctx context.Context, in *SystemFileListTotalRequest, opts ...grpc.CallOption) (*SystemFileTotalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemFileTotalResponse)
	err := c.cc.Invoke(ctx, SystemFileService_SystemFileListTotal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemFileServiceServer is the server API for SystemFileService service.
// All implementations must embed UnimplementedSystemFileServiceServer
// for forward compatibility
//
// SystemFileService 服务
type SystemFileServiceServer interface {
	SystemFileCreate(context.Context, *SystemFileCreateRequest) (*SystemFileCreateResponse, error)
	SystemFileUpdate(context.Context, *SystemFileUpdateRequest) (*SystemFileUpdateResponse, error)
	SystemFileDelete(context.Context, *SystemFileDeleteRequest) (*SystemFileDeleteResponse, error)
	SystemFile(context.Context, *SystemFileRequest) (*SystemFileResponse, error)
	SystemFileList(context.Context, *SystemFileListRequest) (*SystemFileListResponse, error)
	SystemFileListTotal(context.Context, *SystemFileListTotalRequest) (*SystemFileTotalResponse, error)
	mustEmbedUnimplementedSystemFileServiceServer()
}

// UnimplementedSystemFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSystemFileServiceServer struct {
}

func (UnimplementedSystemFileServiceServer) SystemFileCreate(context.Context, *SystemFileCreateRequest) (*SystemFileCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemFileCreate not implemented")
}
func (UnimplementedSystemFileServiceServer) SystemFileUpdate(context.Context, *SystemFileUpdateRequest) (*SystemFileUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemFileUpdate not implemented")
}
func (UnimplementedSystemFileServiceServer) SystemFileDelete(context.Context, *SystemFileDeleteRequest) (*SystemFileDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemFileDelete not implemented")
}
func (UnimplementedSystemFileServiceServer) SystemFile(context.Context, *SystemFileRequest) (*SystemFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemFile not implemented")
}
func (UnimplementedSystemFileServiceServer) SystemFileList(context.Context, *SystemFileListRequest) (*SystemFileListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemFileList not implemented")
}
func (UnimplementedSystemFileServiceServer) SystemFileListTotal(context.Context, *SystemFileListTotalRequest) (*SystemFileTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemFileListTotal not implemented")
}
func (UnimplementedSystemFileServiceServer) mustEmbedUnimplementedSystemFileServiceServer() {}

// UnsafeSystemFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemFileServiceServer will
// result in compilation errors.
type UnsafeSystemFileServiceServer interface {
	mustEmbedUnimplementedSystemFileServiceServer()
}

func RegisterSystemFileServiceServer(s grpc.ServiceRegistrar, srv SystemFileServiceServer) {
	s.RegisterService(&SystemFileService_ServiceDesc, srv)
}

func _SystemFileService_SystemFileCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemFileCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemFileServiceServer).SystemFileCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemFileService_SystemFileCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemFileServiceServer).SystemFileCreate(ctx, req.(*SystemFileCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemFileService_SystemFileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemFileUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemFileServiceServer).SystemFileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemFileService_SystemFileUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemFileServiceServer).SystemFileUpdate(ctx, req.(*SystemFileUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemFileService_SystemFileDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemFileDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemFileServiceServer).SystemFileDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemFileService_SystemFileDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemFileServiceServer).SystemFileDelete(ctx, req.(*SystemFileDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemFileService_SystemFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemFileServiceServer).SystemFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemFileService_SystemFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemFileServiceServer).SystemFile(ctx, req.(*SystemFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemFileService_SystemFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemFileListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemFileServiceServer).SystemFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemFileService_SystemFileList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemFileServiceServer).SystemFileList(ctx, req.(*SystemFileListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemFileService_SystemFileListTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemFileListTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemFileServiceServer).SystemFileListTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SystemFileService_SystemFileListTotal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemFileServiceServer).SystemFileListTotal(ctx, req.(*SystemFileListTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SystemFileService_ServiceDesc is the grpc.ServiceDesc for SystemFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SystemFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.SystemFileService",
	HandlerType: (*SystemFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SystemFileCreate",
			Handler:    _SystemFileService_SystemFileCreate_Handler,
		},
		{
			MethodName: "SystemFileUpdate",
			Handler:    _SystemFileService_SystemFileUpdate_Handler,
		},
		{
			MethodName: "SystemFileDelete",
			Handler:    _SystemFileService_SystemFileDelete_Handler,
		},
		{
			MethodName: "SystemFile",
			Handler:    _SystemFileService_SystemFile_Handler,
		},
		{
			MethodName: "SystemFileList",
			Handler:    _SystemFileService_SystemFileList_Handler,
		},
		{
			MethodName: "SystemFileListTotal",
			Handler:    _SystemFileService_SystemFileListTotal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system_file.proto",
}
